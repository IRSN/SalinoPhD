* Author : V. Salino (IRSN), 02/2021
*----
*  Definition STRUCTURES, MODULES et PROCEDURES
*----
PARAMETER PowerCD PowerD PowerARO
          REFL UOX195 UOX310 UOX255_Py8 UOX255_Py12 UOX310_Py12 ::
  ::: XSM_FILE
          REFL UOX195 UOX310 UOX255_Py8 UOX255_Py12 UOX310_Py12 ; ;
LINKED_LIST GeoRes Track System Flux Matex MacroTot Fmap MicroFuel
            GeoCoeur Thermo List ;
MODULE TRIVAT: TRIVAA: FLUD: GREP:  DELETE: END: FLPOW: RESINI: THM: ;
PROCEDURE   InterpTih GetTechData GeoCoreTih ThermaExpans ;

*----
*  Choice of reflector modelling :
*  - TousPaliers
*  - MargCpy
*  - MargCpyAdjus
*----
STRING TypeRefl := "TousPaliers" ;
STRING CondLimite ;
*----
* If and only if TousPaliers is being used :
* Palier :
* - CP0_900
* MethodRefl :
* - Lefebvre-Leb
* - Koebke-a
*----
STRING Palier := "CP0_900" ;
STRING MethodRefl := "Lefebvre-Leb" ;

ECHO "TypeRefl =" TypeRefl ;
ECHO "Palier =" Palier ;
ECHO "MethodRefl =" MethodRefl ;

*----
*  Geometry description
*----
REAL dx ;
GeoCoeur GeoRes Matex Fmap := GeoCoreTih :: >>dx<< ;

*----
*  Variables for thermalhydraulics
*----
REAL FlowRate := 21800. (* m3/h *) 3.0 * ;
REAL Tinlet OpePressure dmod tfuel tclad ;
REAL Prel Ptot Pnom ; (* MWth *)
REAL NbAss NbFuelPin NbPinAssXY ;
REAL rTubeEx rCladFuel eCladFuel rFuel ;

List := GetTechData :: 'TIH' 'UOX' 0 'None' 'DEPLPARAMAVG' ;
GREP: List :: GETVAL 'dmod'  1 >>dmod<< ;
GREP: List :: GETVAL 'tmod'  1 >>Tinlet<< ;
GREP: List :: GETVAL 'tfuel' 1 >>tfuel<< ;
EVALUATE tclad := 0.12 tfuel * 0.88 Tinlet * + ;
List := DELETE: List ;
List := GetTechData :: 'TIH' 'UOX' 0 'None' 'GENERAL' ;
GREP: List :: GETVAL 'OpePressure' 1 >>OpePressure<< ;
GREP: List :: GETVAL 'PowMWth'     1 >>Pnom<< ;
GREP: List :: GETVAL 'NbAss'       1 >>NbAss<< ;
GREP: List :: GETVAL 'NbFuelPin'   1 >>NbFuelPin<< ;
GREP: List :: GETVAL 'NbPinAssXY'  1 >>NbPinAssXY<< ;
List := DELETE: List ;
List := GetTechData :: 'TIH' 'UOX' 0 'None' 'DISTANCES' ;
GREP: List :: GETVAL 'rTubeEx'     1 >>rTubeEx<< ;
GREP: List :: GETVAL 'rCladFuel'   1 >>rCladFuel<< ;
GREP: List :: GETVAL 'eCladFuel'   1 >>eCladFuel<< ;
GREP: List :: GETVAL 'rFuel'       1 >>rFuel<< ;
List := DELETE: List ;

REAL rCladFuelIn := rCladFuel eCladFuel - ;

REAL DUMMY_R0 := 0.0 ;
ThermaExpans ::  <<rTubeEx>> "Zr4" <<Tinlet>> "Distance" 'TIH'
                 <<DUMMY_R0>> <<DUMMY_R0>>
                 >>rTubeEx<< ;
ThermaExpans :: <<rCladFuel>> "Zr4" <<tclad>> "Distance" 'TIH'
                <<DUMMY_R0>> <<DUMMY_R0>>
                >>rCladFuel<< ;
ThermaExpans :: <<rCladFuelIn>> "Zr4" <<tclad>> "Distance" 'TIH'
                <<DUMMY_R0>> <<DUMMY_R0>>
                >>rCladFuelIn<< ;
ThermaExpans :: <<rFuel>> "UO2" <<tfuel>> "Distance" 'TIH'
                <<DUMMY_R0>> <<DUMMY_R0>>
                >>rFuel<< ;

* The unit of GetTechData is centimeters, while THM expects meters.
EVALUATE rTubeEx     := rTubeEx     100.0 / ;
EVALUATE rCladFuel   := rCladFuel   100.0 / ;
EVALUATE rCladFuelIn := rCladFuelIn 100.0 / ;
EVALUATE rFuel       := rFuel       100.0 / ;

REAL NbTube   := NbPinAssXY 2.0 ** NbFuelPin - ;
REAL Tot_tub  := rTubeEx 2.0 ** $Pi_R * NbTube    * ;   ! m2
REAL Tot_pin  := rCladFuel 2.0 ** $Pi_R * NbFuelPin * ; ! m2
REAL sass     := dx 100.0 / 2.0 ** ;                    ! m2
REAL asssect  := sass Tot_tub - Tot_pin - ;             ! m2
REAL coresect := NbAss asssect * ;                      ! m2

* The 2x2 meshing implies dividing the number of rods by the same
* amount, in order to correctly calculate the area available for the
* hydraulic flow.
EVALUATE NbFuelPin := NbFuelPin 4.0 / ;
EVALUATE NbTube    := NbTube    4.0 / ;

* Convert temperatures into Kelvin, for proper THM usage and proper
* cross section interpolation
EVALUATE Tinlet := Tinlet  273.15 + ;
EVALUATE tfuel  := tfuel   273.15 + ;

*----
*  Variables used for hot zero power physics testing
*  for 3 different rod insertions
*----
LOGICAL Init := $True_L ;
INTEGER iGrappe ;
REAL CB C D ;
* Index for control rod banks C and D
* - 1.0 for totally unroded
* - 2.0 for insertion of 24 AIC control rods

EVALUATE iGrappe := 1 ;
WHILE iGrappe 3 <= DO
  IF iGrappe 1 = THEN ! C and D banks inserted
    EVALUATE CB C D := 960.0 2.0 2.0 ;
  ELSEIF iGrappe 2 = THEN ! D bank inserted
    EVALUATE CB C D := 1084.0 1.0 2.0 ;
  ELSEIF iGrappe 3 = THEN ! ARO
    EVALUATE CB C D := 1206.0 1.0 1.0 ;
  ENDIF ;

  IF Init THEN
    Fmap := RESINI: Fmap :: SET-PARAM 'C-BORE' <<CB>>
                            SET-PARAM 'D-COOL' <<dmod>>
                            SET-PARAM 'T-FUEL' <<tfuel>> ;
    EVALUATE Init := $False_L ;
  ELSE
    Fmap := RESINI: Fmap :: SET-PARAM 'C-BORE' <<CB>>
                            SET-PARAM 'D-COOL' SAME <<dmod>>
                            SET-PARAM 'T-FUEL' SAME <<tfuel>> ;
  ENDIF ;

  MicroFuel MacroTot Matex Fmap := InterpTih Matex Fmap
    REFL UOX195 UOX310 UOX255_Py8 UOX255_Py12 UOX310_Py12 ::
    <<CB>> <<C>> <<D>> <<TypeRefl>> <<Palier>> <<MethodRefl>> ;

  Track := TRIVAT: GeoRes ::
     MAXR 1000000 DUAL 2 3 ;

  System := TRIVAA: MacroTot Track ;

  Flux := FLUD: System Track ::
    EDIT 1 ADI 4 EXTE 1.0E-6 ACCE 5 3 ;

  EVALUATE Prel := 1.0E-9 ; ! 0% PN
  EVALUATE Ptot := Pnom Prel * ;

  IF iGrappe 1 = THEN ! C and D banks inserted
    PowerCD Fmap := FLPOW: Fmap Flux Track Matex ::
      EDIT 2 PTOT <<Ptot>> PRINT DISTR POWER ;
  ELSEIF iGrappe 2 = THEN ! D bank inserted
    PowerD Fmap := FLPOW: Fmap Flux Track Matex ::
      EDIT 2 PTOT <<Ptot>> PRINT DISTR POWER ;
  ELSEIF iGrappe 3 = THEN ! ARO
    PowerARO Fmap := FLPOW: Fmap Flux Track Matex ::
      EDIT 2 PTOT <<Ptot>> PRINT DISTR POWER ;
  ENDIF ;

  Thermo Fmap := THM: Fmap ::
    EDIT 0
    ASSMB  <<NbFuelPin>> <<NbTube>>
    CWSECT <<coresect>> <<FlowRate>>
    INLET  <<OpePressure>> <<Tinlet>>
    RADIUS <<rFuel>> <<rCladFuelIn>> <<rCladFuel>> <<rTubeEx>> ;

  MicroFuel MacroTot Track System Flux Thermo := DELETE:
  MicroFuel MacroTot Track System Flux Thermo ;
  EVALUATE iGrappe := iGrappe 1 + ;
ENDWHILE ;

END: ;
QUIT "LIST" .
