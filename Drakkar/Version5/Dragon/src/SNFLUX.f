*DECK SNFLUX
      SUBROUTINE SNFLUX (KPSYS,INCONV,INGIND,IPTRK,IMPX,NGRP,NGEFF,
     1 NREG,NBMIX,NUN,MAT,VOL,KEYFLX,FUNKNO,SUNKNO,ITER)
*
*-----------------------------------------------------------------------
*
*Purpose:
* solve a single non-accelerated scattering iteration of the N-group
* transport equation for fluxes using the discrete ordinates (SN)
* method.
*
*Copyright:
* Copyright (C) 2007 Ecole Polytechnique de Montreal
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version
*
*Author(s): A. Hebert
*
*Parameters: input
* KPSYS   pointer to the assembly matrices. KPSYS is an array of
*         directories.
* INCONV  energy group convergence flag (set to .false. if converged).
* INGIND  energy group index assign to 1:NGEFF arrays.
* IPTRK   pointer to the tracking (L_TRACK signature).
* IMPX    print flag (equal to zero for no print).
* NGRP    number of energy groups.
* NGEFF   dimension of arrays KPSYS, INCONV and INGIND.
* NREG    total number of regions for which specific values of the
*         neutron flux and reactions rates are required.
* NBMIX   number of mixtures.
* NUN     total number of unknowns in vectors SUNKNO and FUNKNO.
* MAT     index-number of the mixture type assigned to each volume.
* VOL     volumes.
* KEYFLX  position of averaged flux elements in FUNKNO vector.
* SUNKNO  input source vector.
* ITER    number of previous calls to SNFLUX.
*
*Parameters: input/output
* FUNKNO  unknown vector.
*
*-----------------------------------------------------------------------
*
      USE GANLIB
*----
*  SUBROUTINE ARGUMENTS
*----
      TYPE(C_PTR) KPSYS(NGEFF),IPTRK
      INTEGER     NGEFF,INGIND(NGEFF),IMPX,NGRP,NREG,NBMIX,NUN,
     1            MAT(NREG),KEYFLX(NREG),ITER
      LOGICAL     INCONV(NGEFF)
      REAL        VOL(NREG),FUNKNO(NUN,NGRP),SUNKNO(NUN,NGRP)
*----
*  LOCAL VARIABLES
*----
      PARAMETER  (IUNOUT=6,NSTATE=40)
      TYPE(C_PTR) JPSYS
      INTEGER     IPAR(NSTATE),NCODE(6)
      REAL        ZCODE(6),SIDE
      LOGICAL     LFIXUP,LDSA
*----
*  ALLOCATABLE ARRAYS
*---
      INTEGER, ALLOCATABLE, DIMENSION(:) :: IZGLOB, CONNEC
      INTEGER, DIMENSION(2,3,6) :: CONFROM
      REAL, ALLOCATABLE, DIMENSION(:,:) :: QEXT,OLD,SGAR
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: SGAS
*
      TYPE(C_PTR) U_PTR,W_PTR,PL_PTR,JOP_PTR,UPQ_PTR,WPQ_PTR,ALPHA_PTR,
     1 PLZ_PTR,SURF_PTR,XXX_PTR,DU_PTR,DE_PTR,MRM_PTR,MRMX_PTR,MRMY_PTR,
     2 MRMZ_PTR,DB_PTR,DA_PTR,DAL_PTR,DZ_PTR,DC_PTR
      INTEGER, POINTER, DIMENSION(:) :: JOP,MRM,MRMX,MRMY,MRMZ
      REAL, POINTER, DIMENSION(:) :: U,W,PL,UPQ,WPQ,ALPHA,PLZ,SURF,DU,
     1 DE,XXX,DB,DA,DAL,DZ,DC
*----
*  SCRATCH STORAGE ALLOCATION
*----
      ALLOCATE(QEXT(NUN,NGRP),OLD(NUN,NGRP))
*----
*  RECOVER SN SPECIFIC PARAMETERS.
*----
      CALL LCMGET(IPTRK,'STATE-VECTOR',IPAR)
      ITYPE=IPAR(6)
      IELEM=IPAR(8)
      ISCHM=IPAR(10)
      L4=IPAR(11)
      LX=IPAR(12)
      LY=IPAR(13)
      LZ=IPAR(14)
      NLF=IPAR(15)
      ISCAT=IPAR(16)
      LFIXUP=IPAR(18).EQ.1
      LDSA=IPAR(19).EQ.1
      NSDSA=IPAR(21)
      ISPLH=IPAR(26)
      IGAV=IPAR(29)
      OLD(:NUN,:NGRP)=FUNKNO(:NUN,:NGRP)
*----
*  RECOVER TOTAL AND WITHIN-GROUP SCATTERING MULTIGROUP CROSS SECTIONS.
*----
      ALLOCATE(SGAR(0:NBMIX,NGRP),SGAS(0:NBMIX,ISCAT,NGRP))
      NANI=1
      DO 10 II=1,NGEFF
      IF(.NOT.INCONV(II)) GO TO 10
      JPSYS=KPSYS(II)
      IG=INGIND(II)
      CALL LCMLEN(JPSYS,'DRAGON-TXSC',ILONG,ITYLCM)
      IF(ILONG.NE.NBMIX+1) CALL XABORT('SNFLUX: INVALID TXSC LENGTH.')
      CALL LCMLEN(JPSYS,'DRAGON-S0XSC',ILONG,ITYLCM)
      NANI=MAX(NANI,ILONG/(NBMIX+1))
      IF(NANI.GT.ISCAT) CALL XABORT('SNFLUX: INVALID S0XSC LENGTH.')
      CALL LCMGET(JPSYS,'DRAGON-TXSC',SGAR(0,IG))
      CALL LCMGET(JPSYS,'DRAGON-S0XSC',SGAS(0,1,IG))
*----
*  PRINT SOURCES.
*----
      IF(IMPX.GT.3) THEN
        WRITE(IUNOUT,400) IG
        WRITE(IUNOUT,'(1P,6(5X,E15.7))') (SUNKNO(KEYFLX(I),IG),I=1,NREG)
      ENDIF
   10 CONTINUE
*----
*  COMPUTE THE FLUX.
*----
      IF(ITYPE.EQ.2) THEN
*------------
* 1D SLAB
*------------
        NSCT=ISCAT
        IF(IELEM*NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QEXT OVERFLOW'
     1  //'(1)')
        CALL LCMGPD(IPTRK,'U',U_PTR)
        CALL LCMGPD(IPTRK,'W',W_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
        CALL C_F_POINTER(U_PTR,U,(/ NLF /))
        CALL C_F_POINTER(W_PTR,W,(/ NLF /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NLF /))
        CALL LCMGET(IPTRK,'NCODE',NCODE)
        CALL LCMGET(IPTRK,'ZCODE',ZCODE)
        DO 50 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 50
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/1D-slab'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 40 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 40
        DO 30 IL=0,NANI-1
        FACT=REAL(2*IL+1)
        DO 20 IEL=1,IELEM
        IND=(IR-1)*NSCT*IELEM+IELEM*IL+IEL
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
   20   CONTINUE
   30   CONTINUE
   40   CONTINUE
        CALL SNFT1P(NREG,NBMIX,ISCHM,IELEM,NLF,NSCT,U,W,PL,MAT,VOL,
     1  SGAR(0,IG),NCODE,ZCODE,QEXT(1,IG),LFIXUP,FUNKNO(1,IG))
   50   CONTINUE
      ELSE IF(ITYPE.EQ.3) THEN
*------------
* 1D TUBE/CYLINDRICAL
*------------
        IF(IELEM.NE.1) CALL XABORT('SNFLUX: DIAM 0 EXPECTED(1).')
        NSCT=(ISCAT/2)*(ISCAT/2+1)+(ISCAT+1)*MOD(ISCAT,2)/2
        IF(NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QEXT OVERFLOW(2)')
        M2=NLF/2
        CALL LCMLEN(IPTRK,'UPQ',NPQ,ITYLCM)
        CALL LCMGPD(IPTRK,'JOP',JOP_PTR)
        CALL LCMGPD(IPTRK,'U',U_PTR)
        CALL LCMGPD(IPTRK,'UPQ',UPQ_PTR)
        CALL LCMGPD(IPTRK,'WPQ',WPQ_PTR)
        CALL LCMGPD(IPTRK,'ALPHA',ALPHA_PTR)
        CALL LCMGPD(IPTRK,'PLZ',PLZ_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
        CALL LCMGPD(IPTRK,'SURF',SURF_PTR)
        CALL LCMGET(IPTRK,'ZCODE',ZCODE)
*
        CALL C_F_POINTER(JOP_PTR,JOP,(/ M2 /))
        CALL C_F_POINTER(U_PTR,U,(/ NPQ /))
        CALL C_F_POINTER(UPQ_PTR,UPQ,(/ NPQ /))
        CALL C_F_POINTER(WPQ_PTR,WPQ,(/ NPQ /))
        CALL C_F_POINTER(ALPHA_PTR,ALPHA,(/ NPQ /))
        CALL C_F_POINTER(PLZ_PTR,PLZ,(/ NSCT*M2 /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NPQ /))
        CALL C_F_POINTER(SURF_PTR,SURF,(/ NREG+1 /))
*
        DO 90 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 90
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/1D-cyl'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 80 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 80
        IOF=0
        DO 70 IL=0,NANI-1
        FACT=REAL(2*IL+1)
        DO 60 IM=0,IL
        IF(MOD(IL+IM,2).EQ.1) GO TO 60
        IOF=IOF+1
        IND=(IR-1)*NSCT+IOF
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
   60   CONTINUE
   70   CONTINUE
   80   CONTINUE
        CURR=0.0
        CALL SNFT1C(NREG,NBMIX,M2,NPQ,ISCAT,NSCT,JOP,U,UPQ,WPQ,ALPHA,
     1  PLZ,PL,MAT,VOL,SURF,SGAR(0,IG),IGAV,QEXT(1,IG),LFIXUP,CURR,
     2  FUNKNO(1,IG))
        IF(ZCODE(2).NE.0.0) THEN
          CA=CURR
          CB=1.0
          CALL SNFT1C(NREG,NBMIX,M2,NPQ,ISCAT,NSCT,JOP,U,UPQ,WPQ,ALPHA,
     1    PLZ,PL,MAT,VOL,SURF,SGAR(0,IG),IGAV,QEXT(1,IG),LFIXUP,CB,
     2    FUNKNO(1,IG))
          CURR=ZCODE(2)*CA/(1.0+ZCODE(2)*(CA-CB))
          CALL SNFT1C(NREG,NBMIX,M2,NPQ,ISCAT,NSCT,JOP,U,UPQ,WPQ,ALPHA,
     1    PLZ,PL,MAT,VOL,SURF,SGAR(0,IG),IGAV,QEXT(1,IG),LFIXUP,CURR,
     2    FUNKNO(1,IG))
        ENDIF
   90   CONTINUE
      ELSE IF(ITYPE.EQ.4) THEN
*------------
* 1D SPHERE
*------------
        IF(IELEM.NE.1) CALL XABORT('SNFLUX: DIAM 0 EXPECTED(2).')
        NSCT=ISCAT
        IF(NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QEXT OVERFLOW(3)')
        CALL LCMGPD(IPTRK,'U',U_PTR)
        CALL LCMGPD(IPTRK,'W',W_PTR)
        CALL LCMGPD(IPTRK,'ALPHA',ALPHA_PTR)
        CALL LCMGPD(IPTRK,'PLZ',PLZ_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
        CALL LCMGPD(IPTRK,'SURF',SURF_PTR)
        CALL LCMGPD(IPTRK,'XXX',XXX_PTR)
        CALL LCMGET(IPTRK,'ZCODE',ZCODE)
*
        CALL C_F_POINTER(U_PTR,U,(/ NLF /))
        CALL C_F_POINTER(W_PTR,W,(/ NLF /))
        CALL C_F_POINTER(ALPHA_PTR,ALPHA,(/ NLF /))
        CALL C_F_POINTER(PLZ_PTR,PLZ,(/ NSCT /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NLF /))
        CALL C_F_POINTER(SURF_PTR,SURF,(/ NREG+1 /))
        CALL C_F_POINTER(XXX_PTR,XXX,(/ NREG+1 /))
*
        DO 120 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 120
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/1D-sph'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 110 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 110
        DO 100 IL=0,NANI-1
        FACT=REAL(2*IL+1)
        IND=(IR-1)*NSCT+IL+1
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
  100   CONTINUE
  110   CONTINUE
        CURR=0.0
        CALL SNFT1S(NREG,NBMIX,NLF,NSCT,U,W,ALPHA,PLZ,PL,MAT,VOL,SURF,
     1  XXX,SGAR(0,IG),IGAV,QEXT(1,IG),LFIXUP,CURR,FUNKNO(1,IG))
        IF(ZCODE(2).NE.0.0) THEN
          CA=CURR
          CB=1.0
          CALL SNFT1S(NREG,NBMIX,NLF,NSCT,U,W,ALPHA,PLZ,PL,MAT,VOL,
     1    SURF,XXX,SGAR(0,IG),IGAV,QEXT(1,IG),LFIXUP,CB,FUNKNO(1,IG))
          CURR=ZCODE(2)*CA/(1.0+ZCODE(2)*(CA-CB))
          CALL SNFT1S(NREG,NBMIX,NLF,NSCT,U,W,ALPHA,PLZ,PL,MAT,VOL,
     1    SURF,XXX,SGAR(0,IG),IGAV,QEXT(1,IG),LFIXUP,CURR,FUNKNO(1,IG))
        ENDIF
  120   CONTINUE
      ELSE IF(ITYPE.EQ.5) THEN
*------------
* 2D CARTESIAN
*------------
        NSCT=ISCAT*(ISCAT+1)/2
        IF(IELEM*IELEM*NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QEXT OVE'
     1  //'RFLOW(4)')
        CALL LCMLEN(IPTRK,'DU',NPQ,ITYLCM)
        CALL LCMGPD(IPTRK,'DU',DU_PTR)
        CALL LCMGPD(IPTRK,'DE',DE_PTR)
        CALL LCMGPD(IPTRK,'W',W_PTR)
        CALL LCMGPD(IPTRK,'MRM',MRM_PTR)
        CALL LCMGPD(IPTRK,'MRMY',MRMY_PTR)
        CALL LCMGPD(IPTRK,'DB',DB_PTR)
        CALL LCMGPD(IPTRK,'DA',DA_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
*
        CALL C_F_POINTER(DU_PTR,DU,(/ NPQ /))
        CALL C_F_POINTER(DE_PTR,DE,(/ NPQ /))
        CALL C_F_POINTER(W_PTR,W,(/ NPQ /))
        CALL C_F_POINTER(MRM_PTR,MRM,(/ NPQ /))
        CALL C_F_POINTER(MRMY_PTR,MRMY,(/ NPQ /))
        CALL C_F_POINTER(DB_PTR,DB,(/ LX*NPQ /))
        CALL C_F_POINTER(DA_PTR,DA,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NPQ /))
*
        CALL LCMGET(IPTRK,'NCODE',NCODE)
        CALL LCMGET(IPTRK,'ZCODE',ZCODE)
        DO 170 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 170
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/2D-car'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 160 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 160
        IOF=0
        DO 150 IL=0,NANI-1
        FACT=REAL(2*IL+1)
        DO 140 IM=-IL,IL
        IF(MOD(IL+IM,2).EQ.1) GO TO 140
        IOF=IOF+1
        DO 130 IEL=1,IELEM*IELEM
        IND=(IR-1)*NSCT*IELEM*IELEM+(IOF-1)*IELEM*IELEM+IEL
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
  130   CONTINUE
  140   CONTINUE
  150   CONTINUE
  160   CONTINUE
        IF(ISCHM.EQ.1)THEN
          CALL SNFT12(LX,LY,IELEM,NBMIX,NPQ,NSCT,MAT,VOL,SGAR(0,IG),
     1    NCODE,ZCODE,QEXT(1,IG),LFIXUP,DU,DE,W,MRM,MRMY,DB,DA,PL,
     2    FUNKNO(1,IG),FUNKNO(L4+1,IG),FUNKNO(L4+IELEM*LY*NPQ+1,IG))
        ELSEIF(ISCHM.EQ.2)THEN
          CALL SNFT22(LX,LY,IELEM,NBMIX,NPQ,NSCT,MAT,VOL,SGAR(0,IG),
     1    NCODE,ZCODE,QEXT(1,IG),LFIXUP,DU,DE,W,MRM,MRMY,DB,DA,PL,
     2    FUNKNO(1,IG),FUNKNO(L4+1,IG),FUNKNO(L4+IELEM*LY*NPQ+1,IG))
        ENDIF
  170   CONTINUE
      ELSE IF(ITYPE.EQ.6) THEN
*------------
* TUBE 2D (R-Z)
*------------
        IF(IELEM.NE.1) CALL XABORT('SNFLUX: DIAM 0 EXPECTED(3).')
        NSCT=ISCAT*(ISCAT+1)/2
        IF(NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QEXT OVERFLOW(5)')
        CALL LCMLEN(IPTRK,'DU',NPQ,ITYLCM)
        CALL LCMGPD(IPTRK,'DU',DU_PTR)
        CALL LCMGPD(IPTRK,'DE',DE_PTR)
        CALL LCMGPD(IPTRK,'W',W_PTR)
        CALL LCMGPD(IPTRK,'MRM',MRM_PTR)
        CALL LCMGPD(IPTRK,'MRMY',MRMY_PTR)
        CALL LCMGPD(IPTRK,'DB',DB_PTR)
        CALL LCMGPD(IPTRK,'DA',DA_PTR)
        CALL LCMGPD(IPTRK,'DAL',DAL_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
*
        CALL C_F_POINTER(DU_PTR,DU,(/ NPQ /))
        CALL C_F_POINTER(DE_PTR,DE,(/ NPQ /))
        CALL C_F_POINTER(W_PTR,W,(/ NPQ /))
        CALL C_F_POINTER(MRM_PTR,MRM,(/ NPQ /))
        CALL C_F_POINTER(MRMY_PTR,MRMY,(/ NPQ /))
        CALL C_F_POINTER(DB_PTR,DB,(/ LX*NPQ /))
        CALL C_F_POINTER(DA_PTR,DA,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(DAL_PTR,DAL,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NPQ /))
*
        CALL LCMGET(IPTRK,'NCODE',NCODE)
        CALL LCMGET(IPTRK,'ZCODE',ZCODE)
        DO 220 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 220
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/2D-rz'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 210 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 210
        IOF=0
        DO 200 IL=0,MIN(ISCAT,NANI)-1
        FACT=REAL(2*IL+1)
        DO 190 IM=-IL,IL
        IF(MOD(IL+IM,2).EQ.1) GO TO 190
        IOF=IOF+1
        IND=(IR-1)*NSCT+(IOF-1)*IELEM*IELEM+1
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
  190   CONTINUE
  200   CONTINUE
  210   CONTINUE
        CALL SNFC12(LX,LY,NBMIX,NPQ,NSCT,MAT,VOL,SGAR(0,IG),NCODE,ZCODE,
     1  QEXT(1,IG),LFIXUP,DU,DE,W,MRM,MRMY,DB,DA,DAL,PL,FUNKNO(1,IG),
     2  FUNKNO(L4+1,IG),FUNKNO(L4+IELEM*LY*NPQ+1,IG))
  220   CONTINUE
      ELSE IF(ITYPE.EQ.7) THEN
*----
*  3D CARTESIAN CASE
*----
        NSCT=(ISCAT)**2
        IF(IELEM*IELEM*IELEM*NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QE'
     1  //'XT OVERFLOW(6)')
        CALL LCMLEN(IPTRK,'DU',NPQ,ITYLCM)
        CALL LCMGPD(IPTRK,'DU',DU_PTR)
        CALL LCMGPD(IPTRK,'DE',DE_PTR)
        CALL LCMGPD(IPTRK,'DZ',DZ_PTR)
        CALL LCMGPD(IPTRK,'W',W_PTR)
        CALL LCMGPD(IPTRK,'MRMX',MRMX_PTR)
        CALL LCMGPD(IPTRK,'MRMY',MRMY_PTR)
        CALL LCMGPD(IPTRK,'MRMZ',MRMZ_PTR)
        CALL LCMGPD(IPTRK,'DC',DC_PTR)
        CALL LCMGPD(IPTRK,'DB',DB_PTR)
        CALL LCMGPD(IPTRK,'DA',DA_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
*
        CALL C_F_POINTER(DU_PTR,DU,(/ NPQ /))
        CALL C_F_POINTER(DE_PTR,DE,(/ NPQ /))
        CALL C_F_POINTER(DZ_PTR,DZ,(/ NPQ /))
        CALL C_F_POINTER(W_PTR,W,(/ NPQ /))
        CALL C_F_POINTER(MRMX_PTR,MRMX,(/ NPQ /))
        CALL C_F_POINTER(MRMY_PTR,MRMY,(/ NPQ /))
        CALL C_F_POINTER(MRMZ_PTR,MRMZ,(/ NPQ /))
        CALL C_F_POINTER(DC_PTR,DC,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(DB_PTR,DB,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(DA_PTR,DA,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NPQ /))
*
        CALL LCMGET(IPTRK,'NCODE',NCODE)
        CALL LCMGET(IPTRK,'ZCODE',ZCODE)
*
        DO 270 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 270
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/3D-car'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 260 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 260
        IOF=0
        DO 250 IL=0,NANI-1
        FACT=REAL(2*IL+1)
        DO 240 IM=-IL,IL
        IOF=IOF+1
        DO 230 IEL=1,IELEM*IELEM*IELEM
        IND=(IR-1)*NSCT*IELEM*IELEM*IELEM+(IOF-1)*IELEM*IELEM*IELEM+IEL
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
  230   CONTINUE
  240   CONTINUE
  250   CONTINUE
  260   CONTINUE
        IF(ISCHM.EQ.1)THEN
          CALL SNFT13(LX,LY,LZ,IELEM,NBMIX,NPQ,NSCT,MAT,VOL,SGAR(0,IG),
     1    NCODE,ZCODE,QEXT(1,IG),LFIXUP,DU,DE,DZ,W,MRMX,MRMY,MRMZ,DC,
     2    DB,DA,PL,FUNKNO(1,IG),FUNKNO(L4+1,IG),
     3    FUNKNO(L4+IELEM*IELEM*LY*LZ*NPQ+1,IG),
     4    FUNKNO(L4+IELEM*IELEM*(LY+LX)*LZ*NPQ+1,IG))
        ELSEIF(ISCHM.EQ.2)THEN
          CALL SNFT23(LX,LY,LZ,IELEM,NBMIX,NPQ,NSCT,MAT,VOL,SGAR(0,IG),
     1    NCODE,ZCODE,QEXT(1,IG),DU,DE,DZ,W,MRMX,MRMY,MRMZ,DC,DB,DA,PL,
     2    FUNKNO(1,IG),FUNKNO(L4+1,IG),
     3    FUNKNO(L4+IELEM*IELEM*LY*LZ*NPQ+1,IG),
     4    FUNKNO(L4+IELEM*IELEM*(LY+LX)*LZ*NPQ+1,IG))
        ENDIF
  270   CONTINUE
      ELSE IF(ITYPE.EQ.8) THEN
*------------
* 2D HEXAGONAL
*------------
        NSCT=ISCAT*(ISCAT+1)/2
        IF(IELEM*IELEM*NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QEXT OVE'
     1  //'RFLOW(7)')
        CALL LCMLEN(IPTRK,'DU',NPQ,ITYLCM)
        CALL LCMGPD(IPTRK,'DU',DU_PTR)
        CALL LCMGPD(IPTRK,'DE',DE_PTR)
        CALL LCMGPD(IPTRK,'W',W_PTR)
        CALL LCMGPD(IPTRK,'DB',DB_PTR)
        CALL LCMGPD(IPTRK,'DA',DA_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
*
        CALL C_F_POINTER(DU_PTR,DU,(/ NPQ /))
        CALL C_F_POINTER(DE_PTR,DE,(/ NPQ /))
        CALL C_F_POINTER(W_PTR,W,(/ NPQ /))
        CALL C_F_POINTER(DB_PTR,DB,(/ LX*NPQ /))
        CALL C_F_POINTER(DA_PTR,DA,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NPQ /))
*
        NHEX     =LX/(3*ISPLH**2)
        MAXCON   =(NHEX*3)*2*3*6
        ALLOCATE(CONNEC(MAXCON),IZGLOB(NHEX*6))
        CALL LCMGET(IPTRK,'CONNEC',CONNEC)
        CALL LCMGET(IPTRK,'IZGLOB',IZGLOB)
        CALL LCMGET(IPTRK,'SIDE',SIDE)
        CALL LCMGET(IPTRK,'CONFROM',CONFROM)
*
        DO 320 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 320
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/2D-hex'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 310 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 310
        IOF=0
        DO 300 IL=0,NANI-1
        FACT=REAL(2*IL+1)
        DO 290 IM=-IL,IL
        IF(MOD(IL+IM,2).EQ.1) GO TO 290
        IOF=IOF+1
        DO 280 IEL=1,IELEM*IELEM
        IND=(IR-1)*NSCT*IELEM*IELEM+(IOF-1)*IELEM*IELEM+IEL
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
  280   CONTINUE
  290   CONTINUE
  300   CONTINUE
  310   CONTINUE
        IF(ISCHM.EQ.1)THEN
          CALL SNFTH1(NHEX,IELEM,ISPLH,NBMIX,NPQ,NSCT,MAT,VOL,
     1    SGAR(0,IG),QEXT(1,IG),DU,DE,W,DB,DA,PL,FUNKNO(1,IG),
     2    CONNEC,IZGLOB,SIDE,CONFROM)
        ELSEIF(ISCHM.EQ.2)THEN
          CALL SNFTH2(NHEX,IELEM,ISPLH,NBMIX,NPQ,NSCT,MAT,VOL,
     1    SGAR(0,IG),QEXT(1,IG),DU,DE,W,DB,DA,PL,FUNKNO(1,IG),
     2    CONNEC,IZGLOB,SIDE,CONFROM)
        ENDIF
  320   CONTINUE
        DEALLOCATE(CONNEC,IZGLOB)
      ELSE IF(ITYPE.EQ.9) THEN
*------------
* 3D HEXAGONAL
*------------
        NSCT=(ISCAT)**2
        IF(IELEM*IELEM*IELEM*NSCT*NREG.GT.NUN) CALL XABORT('SNFLUX: QE'
     1  //'XT OVERFLOW(8)')
        CALL LCMLEN(IPTRK,'DU',NPQ,ITYLCM)
        CALL LCMGPD(IPTRK,'DU',DU_PTR)
        CALL LCMGPD(IPTRK,'DE',DE_PTR)
        CALL LCMGPD(IPTRK,'DZ',DZ_PTR)
        CALL LCMGPD(IPTRK,'W',W_PTR)
        CALL LCMGPD(IPTRK,'MRMZ',MRMZ_PTR)
        CALL LCMGPD(IPTRK,'DC',DC_PTR)
        CALL LCMGPD(IPTRK,'DB',DB_PTR)
        CALL LCMGPD(IPTRK,'DA',DA_PTR)
        CALL LCMGPD(IPTRK,'PL',PL_PTR)
*
        CALL C_F_POINTER(DU_PTR,DU,(/ NPQ /))
        CALL C_F_POINTER(DE_PTR,DE,(/ NPQ /))
        CALL C_F_POINTER(DZ_PTR,DZ,(/ NPQ /))
        CALL C_F_POINTER(W_PTR,W,(/ NPQ /))
        CALL C_F_POINTER(MRMZ_PTR,MRMZ,(/ NPQ /))
        CALL C_F_POINTER(DC_PTR,DC,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(DB_PTR,DB,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(DA_PTR,DA,(/ LX*LY*NPQ /))
        CALL C_F_POINTER(PL_PTR,PL,(/ NSCT*NPQ /))
*
        CALL LCMGET(IPTRK,'NCODE',NCODE)
        CALL LCMGET(IPTRK,'ZCODE',ZCODE)
*
        NHEX     =LX/(3*ISPLH**2)
        MAXCON   =(NHEX*3)*2*3*6
        ALLOCATE(CONNEC(MAXCON),IZGLOB(NHEX*6))
        CALL LCMGET(IPTRK,'CONNEC',CONNEC)
        CALL LCMGET(IPTRK,'IZGLOB',IZGLOB)
        CALL LCMGET(IPTRK,'SIDE',SIDE)
        CALL LCMGET(IPTRK,'CONFROM',CONFROM)
*
        DO 370 II=1,NGEFF
        IF(.NOT.INCONV(II)) GO TO 370
        IG=INGIND(II)
        IF(IMPX.GT.1) WRITE(IUNOUT,410) IG,'SN/3D-hex'
        QEXT(:NUN,IG)=SUNKNO(:NUN,IG)
        DO 360 IR=1,NREG
        IBM=MAT(IR)
        IF(IBM.EQ.0) GO TO 360
        IOF=0
        DO 350 IL=0,NANI-1
        FACT=REAL(2*IL+1)
        DO 340 IM=-IL,IL
        IOF=IOF+1
        DO 330 IEL=1,IELEM*IELEM*IELEM
        IND=(IR-1)*NSCT*IELEM*IELEM*IELEM+(IOF-1)*IELEM*IELEM*IELEM+IEL
        QEXT(IND,IG)=QEXT(IND,IG)+FACT*SGAS(IBM,IL+1,IG)*FUNKNO(IND,IG)
  330   CONTINUE
  340   CONTINUE
  350   CONTINUE
  360   CONTINUE
        IF(ISCHM.EQ.1)THEN
          CALL SNFTH3(NHEX,LZ,IELEM,ISPLH,SIDE,NBMIX,NPQ,NSCT,MAT,VOL,
     1    NCODE,ZCODE,SGAR(0,IG),QEXT(1,IG),DU,DE,DZ,W,MRMZ,DC,DB,DA,PL,
     2    FUNKNO(1,IG),FUNKNO(L4+1,IG),CONNEC,IZGLOB,CONFROM)
        ELSEIF(ISCHM.EQ.2)THEN
          CALL SNFTH4(NHEX,LZ,IELEM,ISPLH,SIDE,NBMIX,NPQ,NSCT,MAT,VOL,
     1    NCODE,ZCODE,SGAR(0,IG),QEXT(1,IG),DU,DE,DZ,W,MRMZ,DC,DB,DA,PL,
     2    FUNKNO(1,IG),FUNKNO(L4+1,IG),CONNEC,IZGLOB,CONFROM)
        ENDIF
  370   CONTINUE
        DEALLOCATE(CONNEC,IZGLOB)
      ELSE
        CALL XABORT('SNFLUX: TYPE OF DISCRETIZATION NOT IMPLEMENTED.')
      ENDIF
      DEALLOCATE(SGAS,SGAR)
*----
*  DIFFUSION SYNTHETIC ACCELERATION.
*  disable DSA for the NSDSA first source iterations for IELEM=2 or 3
*  in 3D.
*----
      IF((ITYPE.EQ.7).AND.(IELEM.NE.1).AND.(ITER.LE.NSDSA)) LDSA=.FALSE.
      IF(LDSA) THEN
        CALL LCMSIX(IPTRK,'DSA',1)
        CALL LCMGET(IPTRK,'STATE-VECTOR',IPAR)
        IF(NREG.NE.IPAR(1)) CALL XABORT('SNFLUX: INVALID NREG (DSA).')
        NUNSA=IPAR(2)
        IMPY=MAX(0,IMPX-1)
        CALL LCMSIX(IPTRK,' ',2)
        CALL SNDSA(KPSYS,INCONV,INGIND,IPTRK,IMPY,NGRP,NGEFF,NREG,
     1  NBMIX,NUN,ISCAT,MAT,VOL,KEYFLX,NUNSA,ZCODE,OLD,FUNKNO,NHEX)
      ENDIF
*----
*  SCRATCH STORAGE DEALLOCATION
*----
      DEALLOCATE(OLD,QEXT)
      RETURN
  400 FORMAT(//41H SNFLUX: N E U T R O N    S O U R C E S (,I5,3H ):)
  410 FORMAT(/25H SNFLUX: PROCESSING GROUP,I5,6H WITH ,A,1H.)
      END
