*DECK T16RCA
      SUBROUTINE T16RCA(IFT16 ,IPRINT,NGCCPO,NGMTR ,IFGMTR,NVXSR ,
     >                  NMXSR ,B2CRI ,BRNIRR,
     >                  RECXSV,RECXSM,RECTMP,RECSCA)
*
*----
*  1- PROGRAMME STATISTICS:
*      NAME     : T16RCA
*
*Purpose:
*  READ TAPE16 CELL AVERAGED CROSS SECTIONS
*                 AT A SPECIFIC BURNUP
*
*Author(s): 
* G.MARLEAU
*
*      CREATED  : 1999/10/21
*      REF      : IGE-244 REV.1
*
*      MODIFICATION LOG
*      --------------------------------------------------------------
*      | DATE AND INITIALS  | MOTIVATIONS
*      --------------------------------------------------------------
*      | 1999/10/21 G.M.    | READ TAPE16 CELL AVERAGED
*      |                    | CROSS SECTIONS AT A SPECIFIC BURNUP
*      --------------------------------------------------------------
*
*  2- ROUTINE PARAMETERS:
*Parameters: input
* IFT16   TAPE16 FILE UNIT                         I
* IPRINT  PRINT LEVEL                              I
*         =   0 NO PRINT
*         >=  1 PRINT PROCESSING OPTIONS READ
* NGCCPO  NUMBER OF FINAL CONDENSED GROUPS         I
* NGMTR   NUMBER OF MAIN TRANSPORT GROUP           I
* IFGMTR  CPO FEW GROUP IDENTIFIER                 I(NGCCPO)
*         WITH RESPECT TO MTR GROUPS
* NVXSR   NUMBER OF VECTORIAL XS                   I
* NMXSR   NUMBER OF MATRIX XS                      I
* B2CRI   CRITICAL BUCKLINGS                       R(3)
*
*Parameters: output
* BRNIRR  BURNUP IRRADIATION ENERGY                R(3)
* RECXSV  VECTOR CROSS SECTIONS RECORDS            R(NGCCPO,
*                                               NVXSR+NMXSR)
* RECXSM  MATRIX CROSS SECTIONS RECORDS            R(NGCCPO,
*         FORMAT OF RECXSM IS                  NGCCPO,NMXSR)
*         RECXSM(IGTO,IGFROM,IL) REPRESENT
*         SCATTERING CROSS SECTION
*         FROM GROUP "IGFROM" TO GROUP "IGTO"
*         FOR ANISOTROPY LEVEL IL
*
*Parameters: work
* RECTMP  VECTOR CROSS SECTIONS RECORDS            R(NGMTR,4)
* RECSCA  SCATT CROSS SECTIONS RECORDS             R(NGMTR,
*                                                          NGMTR)
*
*  3- ROUTINES CALLED
*    SPECIFIC T16CPO ROUTINES
*      T16FND : FIND A TAPE16 RECORD
*               EQUIVALENT TO FIND FUNCTION
*               IN APPENDIX E OF EACL RC-1176
*    UTILITIES ROUTINES
*      XABORT : ABORT ROUTINE
*      XDRSET : VECTOR INITIALIZATION ROUTINE
*
*----
*
      IMPLICIT         NONE
      INTEGER          IFT16,IPRINT,NGCCPO,NGMTR,NVXSR,NMXSR
      INTEGER          IFGMTR(NGCCPO)
      REAL             B2CRI(3),BRNIRR(3),
     >                 RECXSV(NGCCPO,NVXSR+NMXSR),
     >                 RECXSM(NGCCPO,NGCCPO,NMXSR),
     >                 RECTMP(NGMTR,4),RECSCA(NGMTR,NGMTR)
C----
C  T16 PARAMETERS
C----
      INTEGER          MAXKEY
      PARAMETER       (MAXKEY=2)
      CHARACTER        TKEY1(MAXKEY)*10,TKEY2(MAXKEY)*10,
     >                 RKEY1*10,RKEY2*10
      INTEGER          NKEY,IOPT,NBE,NID,IR
      REAL             RID
C----
C  LOCAL VARIABLES
C  WSMEV FACTOR TO TRANSFORM MEV IN JOULES (WS)
C----
      INTEGER          IOUT
      CHARACTER        NAMSBR*6
      REAL             WSMEV
      PARAMETER       (IOUT=6,NAMSBR='T16RCA',WSMEV=1.602189E-13)
      INTEGER          IGR,IGC,IGD,IGF,JGR,JGC,JGD,JGF
      REAL             FLXNOR,BRNTMP(3),RTIME
C----
C  INITIALIZE CROSS SECTION VECTORS
C----
      IF(IPRINT .GE. 10) THEN
        WRITE(IOUT,6000) NAMSBR
      ENDIF
      CALL XDRSET(RECXSV,NGCCPO*(NVXSR+NMXSR),0.0)
      CALL XDRSET(RECXSM,NGCCPO*NGCCPO*NMXSR,0.0)
C----
C  LOCATE NEXT CELLAV RECORD
C----
      IOPT=0
      TKEY1(1)='CELLAV    '
      TKEY2(1)='MODERATOR '
      NKEY=1
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .LE. 0 ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE
      TKEY1(2)='BEGIN     '
      TKEY2(2)='LEAKAGE   '
      NKEY=2
C----
C  CELL AVERAGED ABSORPTION X-S
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='ABSORPTION'
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. NGMTR ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,(RECTMP(IGR,4),IGR=1,NGMTR)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) (RECTMP(IGR,4),IGR=1,NGMTR)
      ENDIF
C----
C  CELL AVERAGED NU*FISSION
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='NU-FISSION'
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. NGMTR ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,(RECTMP(IGR,3),IGR=1,NGMTR)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) (RECTMP(IGR,3),IGR=1,NGMTR)
      ENDIF
C----
C  CELL AVERAGED TRANSPORT
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='TOTAL-X   '
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. NGMTR ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,(RECTMP(IGR,2),IGR=1,NGMTR)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) (RECTMP(IGR,2),IGR=1,NGMTR)
      ENDIF
C----
C  CELL AVERAGED FLUX
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='FLUX   '
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. NGMTR ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,(RECTMP(IGR,1),IGR=1,NGMTR)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) (RECTMP(IGR,1),IGR=1,NGMTR)
      ENDIF
C----
C  CONDENSE TRANSPORT, ABSORPTION AND NU-FISSION X-S
C  OVER CPO GROUPS
C----
      IGF=0
      DO 100 IGC=1,NGCCPO
        IGD=IGF+1
        IGF=IFGMTR(IGC)
        FLXNOR=0.0
        DO 101 IGR=IGD,IGF
          FLXNOR=FLXNOR+RECTMP(IGR,1)
 101    CONTINUE
        IF(FLXNOR .GT. 0.0) THEN
          FLXNOR=1.0/FLXNOR
          DO 102 IGR=IGD,IGF
            RECTMP(IGR, 1)=RECTMP(IGR, 1)*FLXNOR
            RECXSV(IGC, 2)=RECXSV(IGC, 2)
     >                    +RECTMP(IGR,2)*RECTMP(IGR,1)
            RECXSV(IGC, 3)=RECXSV(IGC, 3)
     >                    +RECTMP(IGR,3)*RECTMP(IGR,1)
            RECXSV(IGC,15)=RECXSV(IGC,15)
     >                    +RECTMP(IGR,4)*RECTMP(IGR,1)
 102      CONTINUE
        ELSE
          CALL XABORT(NAMSBR//
     >   ': FLUX IN ONE CPO GROUP IS 0.0')
        ENDIF
 100  CONTINUE
C----
C  ISOTROPIC SCATTERING MATRIX FROM GROUP IGR TO JGR
C  IS STORED ON TAPE 16 AS
C  ((RECSCA(IGR,JGR),IGR=1,NGMTR),JGR=1,NGMTR)
C  RECXSM(IGTO,IGFROM,1) REPRESENT
C  SCATTERING CROSS SECTION
C  FROM GROUP "IGFROM" TO GROUP "IGTO"
C  FOR ANISOTROPY LEVEL 1
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='SCATTER   '
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. NGMTR*NGMTR ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,
     >          ((RECSCA(IGR,JGR),IGR=1,NGMTR),JGR=1,NGMTR)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) ((RECSCA(IGR,JGR),IGR=1,NGMTR),JGR=1,NGMTR)
      ENDIF
C----
C  FISSION SPECTRUM
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='FISSPECT  '
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. NGMTR ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,(RECTMP(IGR,4),IGR=1,NGMTR)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) (RECTMP(IGR,4),IGR=1,NGMTR)
      ENDIF
C----
C  CONDENSE ISOTROPIC SCATTERING MATRIX AND FISSION SPECTRUM
C  OVER CPO GROUPS
C  COMPUTE TOTAL ISOTROPIC SCATTERING
C  COMPUTE TOTAL AND TRANSPORT CORRECTION
C  TOTAL(1) = ABSORPTION (15) + SCATTERING (21)
C  TRANSPORT CORRECTION (2) = TOTAL(1) -TRANSPORT CORRECTED (2)
C----
      IGF=0
      DO 110 IGC=1,NGCCPO
        IGD=IGF+1
        IGF=IFGMTR(IGC)
        DO 111 IGR=IGD,IGF
          RECXSV(IGC, 5)=RECXSV(IGC,5)+RECTMP(IGR,4)
          JGF=0
          DO 112 JGC=1,NGCCPO
            JGD=JGF+1
            JGF=IFGMTR(JGC)
            DO 113 JGR=JGD,JGF
              RECXSM(JGC,IGC,1)=RECXSM(JGC,IGC,1)
     >                         +RECSCA(IGR,JGR)*RECTMP(IGR,1)
              RECXSV(IGC,21)=RECXSV(IGC,21)
     >                      +RECSCA(IGR,JGR)*RECTMP(IGR,1)
 113        CONTINUE
 112      CONTINUE
 111    CONTINUE
        RECXSV(IGC,1)=RECXSV(IGC,15)+RECXSV(IGC,21)
        RECXSV(IGC,2)=RECXSV(IGC,1)-RECXSV(IGC,2)
 110  CONTINUE
C----
C  LINEARLY ANISOTROPIC SCATTERING FROM GROUP IGR TO JGR
C  IS STORED ON TAPE 16 AS
C  ((RECSCA(IGR,JGR),IGR=1,NGMTR),JGR=1,NGMTR)
C  RECXSM(IGTO,IGFROM,2) REPRESENT
C  SCATTERING CROSS SECTION
C  FROM GROUP "IGFROM" TO GROUP "IGTO"
C  FOR ANISOTROPY LEVEL 2
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='SCATERP1  '
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .EQ. NGMTR*NGMTR ) THEN
        READ(IFT16) RKEY1,RKEY2,NBE,
     >            ((RECSCA(IGR,JGR),IGR=1,NGMTR),JGR=1,NGMTR)
        IF(IPRINT .GE. 100) THEN
          WRITE(IOUT,6100) TKEY2(1)
          WRITE(IOUT,6110) ((RECSCA(IGR,JGR),IGR=1,NGMTR),JGR=1,NGMTR)
        ENDIF
C----
C  CONDENSE LINEARLY ANISOTROPIC SCATTERING MATRIX
C  OVER CPO GROUPS
C  COMPUTE TOTAL LINEARLY ANISOTROPIC SCATTERING
C----
        IGF=0
        DO 120 IGC=1,NGCCPO
          IGD=IGF+1
          IGF=IFGMTR(IGC)
          DO 121 IGR=IGD,IGF
            JGF=0
            DO 122 JGC=1,NGCCPO
              JGD=JGF+1
              JGF=IFGMTR(JGC)
              DO 123 JGR=JGD,JGF
                RECXSM(JGC,IGC,2)=RECXSM(JGC,IGC,2)
     >                           +RECTMP(IGR,4)*RECSCA(IGR,JGR)
                RECXSV(IGC,22)=RECXSV(IGC,22)
     >                        +RECTMP(IGR,4)*RECSCA(IGR,JGR)
 123          CONTINUE
 122        CONTINUE
 121      CONTINUE
 120    CONTINUE
      ENDIF
C----
C  RADIAL AND AXIAL DIFFUSION COEFFICIENTS
C  AND BUCKLING
C----
      TKEY1(2)='CELLAV    '
      TKEY2(2)='K         '
      TKEY1(1)='CELLAV    '
      TKEY2(1)='DIFFUSION '
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. 5*NGMTR+5 ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,(NID,IR=1,3),
     >           (RECTMP(IGR,2),IGR=1,NGMTR),
     >           (RECTMP(IGR,3),IGR=1,NGMTR),
     >           (RID,IGR=1,NGMTR),
     >           (RID,IR=1,2)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) (RECTMP(IGR,2),IGR=1,NGMTR)
        WRITE(IOUT,6110) (RECTMP(IGR,3),IGR=1,NGMTR)
      ENDIF
C----
C  CONDENSE DIFFUSION COEFFICIENTS
C  COMPUTE STRD=1/3*DIFF
C----
      IGF=0
      DO 130 IGC=1,NGCCPO
        IGD=IGF+1
        IGF=IFGMTR(IGC)
        DO 131 IGR=IGD,IGF
          RECXSV(IGC,17)=RECXSV(IGC,17)+RECTMP(IGR,1)
     >       *(B2CRI(1)*RECTMP(IGR,2)+B2CRI(2)*RECTMP(IGR,3))
          RECXSV(IGC,18)=RECXSV(IGC,18)
     >                  +RECTMP(IGR,1)*RECTMP(IGR,2)
          RECXSV(IGC,19)=RECXSV(IGC,19)
     >                  +RECTMP(IGR,1)*RECTMP(IGR,2)
          RECXSV(IGC,20)=RECXSV(IGC,20)
     >                  +RECTMP(IGR,1)*RECTMP(IGR,3)
 131    CONTINUE
C----
C  IF DIFFUSION COEFFICIENT VANISHES
C  ASSUME D=1/3*(TRANSPORT CORRECTED)
C  NO DIRECTIONAL EFFECT
C  THEN  USE STRD=1/3*DIFF
C----
        IF(RECXSV(IGC,17) .EQ. 0.0 .OR.
     >     RECXSV(IGC,18) .EQ. 0.0 .OR.
     >     RECXSV(IGC,19) .EQ. 0.0 .OR.
     >     RECXSV(IGC,19) .EQ. 0.0 ) THEN
          RECXSV(IGC,17)=RECXSV(IGC,1)-RECXSV(IGC,2)
          RECXSV(IGC,18)=0.0
          RECXSV(IGC,19)=0.0
          RECXSV(IGC,20)=0.0
        ELSE
          RECXSV(IGC,17)=1.0/(3.0*RECXSV(IGC,17))
          RECXSV(IGC,18)=1.0/(3.0*RECXSV(IGC,18))
          RECXSV(IGC,19)=1.0/(3.0*RECXSV(IGC,19))
          RECXSV(IGC,20)=1.0/(3.0*RECXSV(IGC,20))
        ENDIF
 130  CONTINUE
C----
C  FISSION CROSS SECTION
C----
      TKEY1(2)='MTR       '
      TKEY2(2)='FEWGROUPS '
      TKEY1(1)='CELLAV    '
      TKEY2(1)='SIGMAF    '
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .NE. NGMTR ) CALL XABORT(NAMSBR//
     >': CANNOT FIND '//TKEY1(1)//' '//TKEY2(1))
      READ(IFT16) RKEY1,RKEY2,NBE,(RECTMP(IGR,4),IGR=1,NGMTR)
      IF(IPRINT .GE. 100) THEN
        WRITE(IOUT,6100) TKEY2(1)
        WRITE(IOUT,6110) (RECTMP(IGR,4),IGR=1,NGMTR)
      ENDIF
C----
C  CONDENSE FISSION CROSS SECTION
C  OVER CPO GROUPS
C----
      IGF=0
      DO 140 IGC=1,NGCCPO
        IGD=IGF+1
        IGF=IFGMTR(IGC)
        DO 141 IGR=IGD,IGF
          RECXSV(IGC, 4)=RECXSV(IGC, 4)
     >                  +RECTMP(IGR,4)*RECTMP(IGR,1)
 141    CONTINUE
 140  CONTINUE
C----
C  BURNUP INFORMATION
C----
      TKEY1(1)='CELLAV    '
      TKEY2(1)='AVG-ENERGY'
      CALL T16FND(IFT16 ,IPRINT,IOPT  ,NKEY  ,TKEY1 ,TKEY2 ,
     >            NBE   )
      IF( NBE .EQ. 5 ) THEN
        READ(IFT16) RKEY1,RKEY2,NBE,RTIME,
     >              BRNTMP(3),BRNTMP(1),BRNTMP(2)
        IF(IPRINT .GE. 10) THEN
          WRITE(IOUT,6010) RTIME,BRNTMP(3),BRNTMP(1),BRNTMP(2)
        ENDIF
        BRNIRR(1)=BRNTMP(1)
        BRNIRR(2)=BRNTMP(2)
        BRNIRR(3)=WSMEV*BRNTMP(3)
      ENDIF
      IF(IPRINT .GE. 10) THEN
        WRITE(IOUT,6001)
      ENDIF
      RETURN
C----
C  PRINT FORMAT
C----
 6000 FORMAT(1X,5('*'),' OUTPUT FROM ',A6,1X,5('*'))
 6001 FORMAT(1X,30('*'))
 6010 FORMAT(6X,'BURNUP IRRADIATION '/1P,
     >       6X,'TIME    (DAYS)     = ',E10.3/
     >       6X,'ENERGY  (MEV)      = ',E10.3/
     >       6X,'BURNUP  (MWD/T)    = ',E10.3/
     >       6X,'IRRADIATION (N/KB) = ',E10.3)
 6100 FORMAT(6X,'CELLAV MAIN TRANSPORT GROUP ',A10)
 6110 FORMAT(1P,10(2X,E10.3))
      END
