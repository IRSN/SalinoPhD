*DECK GapDil.c2m
*======================================================================
* Name:   GapDil.c2m
* Type:   DRAGON procedure
* Author: G. Drouard 06/2018
*         [CS-SI | IRSN/PSN-EXP/SNC/LNR]
*----------------------------------------------------------------------
* Use:
*   -To dilute the gap between the clad and th content of a pin
*   -To carry out this dilution in accordance with the temperature
*   -of the fuel and the temperatue of moderator
*----------------------------------------------------------------------
* Structure of Procedure Appeal :
* GapDil :: <<UnDilValue>> <<Gestion>> <<GapType>> <<tcom>> <<tmod>>
*           >>DilValue<<   ;
* INPUT Required:
*  > <<UnDilValue>> [REAL] :
*       Density value to dilute
*  > <<Gestion>> [STR] :
*       -TIHANGE       called as   "TIH"
*  > <<GapType>> [STR] :
*       -Fuel-Clad Pin Gap called as "FUEL"
*       -AICg-Clad Rod Gap called as "AICG"
*       -AICn-Clad Rod Gap called as "AICN"
*       -B4C-Clad Rod Gap called as "B4C"
*       -SS-Clad Rod Gap called as "SS"
*       -BP Intern-Clad Rod Gap called as "BPIN"
*       -BP Intern-Clad Rod Gap called as "BPEX"
*  > <<ThermExp>> [INTEGER] :
*       ThermExp=0 => Thermal Expansion Desactiviated
*       ThermExp=1 => Thermal Expansion Activiated
*  > <<tcom>> [REAL] :
*       Fuel Temperature in C
*  > <<tmod>> [REAL] :
*       Moderator Temperature in C
*======================================================================

! /////////////////////////////////////////////////////////////////////
! /// IMPORTS AND DECLARATION ///
! /////////////////////////////////////////////////////////////////////
! ---------------------------------------------------------------------
! --- Procedures and Modules ---
! ---------------------------------------------------------------------
MODULE    GREP: END: ABORT: ;
PROCEDURE GetTechData ThermaExpans ;
! ---------------------------------------------------------------------
! --- Variable Declaration ---
! ---------------------------------------------------------------------
*** I-O variables ***
STRING GapType ;
STRING Gestion ;
REAL UnDilValue ;
REAL tcom ;
REAL tmod ;
REAL DilValue ;
INTEGER ThermExp ;
*** local variables ***
INTEGER DUMMY_I0 := 310 ;
REAL DUMMY_R0 := 0.0 ;
STRING DUMMY_S := "UOX" ;
REAL rContent ;
REAL rClad ;
REAL eClad ;
REAL rGap ;
REAL rContentHot ;
REAL rCladHot ;
REAL eCladHot ;
REAL rGapHot ;
REAL TempContent ;
REAL TempClad ;
REAL DilCoef ;
REAL tclad ;
REAL TestGap ;
STRING MatContent ;
STRING MatClad ;
STRING Model := "PIN" ;
LINKED_LIST Distances ;

! ---------------------------------------------------------------------
! --- Inputs ---
! ---------------------------------------------------------------------
:: >>UnDilValue<< >>Gestion<< >>GapType<< >>ThermExp<<
>>tcom<< >>tmod<< ;

IF Gestion "TIH" = THEN
EVALUATE Model := "TIH" ;
ENDIF ;


! ---------------------------------------------------------------------
! --- TechData ---
! ---------------------------------------------------------------------
Distances := GetTechData :: <<Gestion>> <<DUMMY_S>>
 <<DUMMY_I0>> 'None' 'DISTANCES' ;

EVALUATE tclad := .88 tmod * 0.12 tcom * + ;
! /////////////////////////////////////////////////////////////////////
! /// TREATMENTS AND CALCULATION ///
! /////////////////////////////////////////////////////////////////////
! ---------------------------------------------------------------------
! --- Extract Data ---
! ---------------------------------------------------------------------
IF GapType "FUEL" = THEN
GREP: Distances :: GETVAL 'rFuel' 1 >>rContent<< ;
GREP: Distances :: GETVAL 'rCladFuel' 1 >>rClad<< ;
GREP: Distances :: GETVAL 'eCladFuel' 1 >>eClad<< ;
EVALUATE TempContent := tcom  ;
EVALUATE TempClad    := tclad ;
EVALUATE MatContent := "UO2"  ;
EVALUATE MatClad    := "Zr4" ;
ECHO "FUEL" ;
ELSEIF GapType "AICG" = THEN
GREP: Distances :: GETVAL 'rRodAICg' 1 >>rContent<< ;
GREP: Distances :: GETVAL 'rCladRod' 1 >>rClad<< ;
GREP: Distances :: GETVAL 'eCladRod' 1 >>eClad<< ;
EVALUATE TempContent := tmod ;
EVALUATE TempClad    := tmod ;
EVALUATE MatContent := "AIC"   ;
EVALUATE MatClad    := "SS304" ;
ECHO "AICG" ;
ELSEIF GapType "AICN" = THEN
GREP: Distances :: GETVAL 'rRodAICn' 1 >>rContent<< ;
GREP: Distances :: GETVAL 'rCladRod' 1 >>rClad<< ;
GREP: Distances :: GETVAL 'eCladRod' 1 >>eClad<< ;
EVALUATE TempContent := tmod ;
EVALUATE TempClad    := tmod ;
EVALUATE MatContent := "AIC"   ;
EVALUATE MatClad    := "SS304" ;
ECHO "AICN" ;
ELSEIF GapType "B4C" = THEN
GREP: Distances :: GETVAL 'rRodB4C' 1 >>rContent<< ;
GREP: Distances :: GETVAL 'rCladRod' 1 >>rClad<< ;
GREP: Distances :: GETVAL 'eCladRod' 1 >>eClad<< ;
EVALUATE TempContent := tmod ;
EVALUATE TempClad    := tmod ;
EVALUATE MatContent := "B4C"   ;
EVALUATE MatClad    := "SS304" ;
ECHO "B4C" ;
ELSEIF GapType "SS" = THEN
GREP: Distances :: GETVAL 'rRodSSEx' 1 >>rContent<< ;
GREP: Distances :: GETVAL 'rCladRod' 1 >>rClad<< ;
GREP: Distances :: GETVAL 'eCladRod' 1 >>eClad<< ;
EVALUATE TempContent := tmod ;
EVALUATE TempClad    := tmod ;
EVALUATE MatContent := "SS304" ;
EVALUATE MatClad    := "SS304" ;
ECHO "SS" ;
ELSEIF GapType "BPIN" = THEN
GREP: Distances :: GETVAL 'rRodBPIn' 1 >>rContent<< ;
GREP: Distances :: GETVAL 'rCladBPIn' 1 >>rClad<< ;
GREP: Distances :: GETVAL 'eCladBPIn' 1 >>eClad<< ;
EVALUATE eClad := eClad -1. * ; !!!Gaine Interne Thickness toward ext
EVALUATE TempContent := tmod ;
EVALUATE TempClad    := tmod ;
EVALUATE MatContent := "Pyrex" ;
EVALUATE MatClad    := "SS304" ;
ECHO "BPIN" ;
ELSEIF GapType "BPEX" = THEN
GREP: Distances :: GETVAL 'rRodBPEx' 1 >>rContent<< ;
GREP: Distances :: GETVAL 'rCladBPEx' 1 >>rClad<< ;
GREP: Distances :: GETVAL 'eCladBPEx' 1 >>eClad<< ;
EVALUATE TempContent := tmod ;
EVALUATE TempClad    := tmod ;
EVALUATE MatContent := "Pyrex" ;
EVALUATE MatClad    := "SS304" ;
ECHO "BPEX" ;
ELSE
ECHO "Non recognized GapType : " GapType ;
ABORT: ;
ENDIF ;


EVALUATE rGap := rClad eClad - ;

! ---------------------------------------------------------------------
! --- ThermaExpans of Distances ---
! ---------------------------------------------------------------------
IF ThermExp  0 <> THEN
ThermaExpans :: <<rContent>> <<MatContent>> <<TempContent>> "Distance"
                <<Model>>
                <<DUMMY_R0>> <<DUMMY_R0>>
                >>rContentHot<< ;
ThermaExpans :: <<rClad>> <<MatClad>> <<TempClad>> "Distance"
                <<Model>>
                <<DUMMY_R0>> <<DUMMY_R0>>
                >>rCladHot<< ;
ThermaExpans :: <<eClad>> <<MatClad>> <<TempClad>> "Distance"
                <<Model>>
                <<DUMMY_R0>> <<DUMMY_R0>>
                >>eCladHot<< ;
ELSE
EVALUATE rContentHot := rContent ;
EVALUATE rCladHot := rClad ;
EVALUATE eCladHot := eClad ;
ENDIF ;
! ---------------------------------------------------------------------
! --- DilCoef Calculation ---
! ---------------------------------------------------------------------
EVALUATE rGapHot := rCladHot eCladHot - ;

EVALUATE TestGap := rGapHot rContentHot - rGap rContent - * ;

*** Externe ***
IF rContent rClad < THEN
  ! *** Zero Gap Case **
  IF rGapHot rContentHot <= THEN
      EVALUATE DilCoef := 1. ;
      ECHO "GAP CLOSED" ;
  ! *** Other cases **
  ELSE
      EVALUATE DilCoef := rCladHot 2.0 ** rGapHot 2.0 ** -
                          rCladHot 2.0 ** rContentHot 2.0 ** - / ;
      ECHO "GAP OPEN" ;
  ENDIF ;
*** Interne ***
ELSE
  ! *** Zero Gap Case **
  IF rGapHot rContentHot >= THEN
      EVALUATE DilCoef := 1. ;
      ECHO "GAP CLOSED" ;
  ! *** Other cases **
  ELSE
      EVALUATE DilCoef :=  rGapHot 2.0 **     rCladHot 2.0 ** -
                           rContentHot 2.0 ** rCladHot 2.0 ** - / ;
      ECHO "GAP OPEN" ;
  ENDIF ;
ENDIF ;
! ---------------------------------------------------------------------
! --- DilValue Calculation ---
! ---------------------------------------------------------------------
ECHO "@@@@@@@@@@@@@@@ GAP DILUTION RESULTS @@@@@@@@@@@@@@@" ;

EVALUATE DilValue := UnDilValue DilCoef * ;
ECHO "rContent    : " rContent ;
ECHO "rGap        : " rGap ;
ECHO "rClad       : " rClad ;
ECHO "eClad       : " eClad ;
ECHO "rContentHot : " rContentHot ;
ECHO "rGapHot     : " rGapHot ;
ECHO "rCladHot    : " rCladHot ;
ECHO "eCladHot    : " eCladHot ;
ECHO "DilCoef     : " DilCoef ;
ECHO "UndilValue  : " UnDilValue ;
ECHO "DilValue    : " DilValue ;
! /////////////////////////////////////////////////////////////////////
! /// OUTPUT ///
! /////////////////////////////////////////////////////////////////////
:: <<DilValue>>   ;

END: ;
QUIT "LIST" .
