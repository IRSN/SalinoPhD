#!/bin/bash
#==========================================================
# Name         : MakeBib1BU.access
# Type         : BASH script
# Use          : Recover Dragon procedures
#                Recover output XSM files from EvoNominale.x2m
#                Modification input file .x2m and procedures .c2m
# Author       : Various
#----------------------------------------------------------
# Note
#   The positional parameter "$1" contains the path to the directory
#   where the input file .x2m is stored (by default XXX/data/. )
#----------------------------------------------------------
# Mandatory Arguments
#  > EvoName      : [STR] Fuel assembly identifier
#                         [Gestion]_[AssType]_[Teneur](-[ConfigPyrex])
#  > NuclData     : [STR] Nuclear data library
#  > NumHistCalc  : [INT] Nb. nominal/off-nominal depletion
#  > ListIsoPart  : [INT] List of particularised isotopes
#  > mydata       : [STR] Input file Dragon
#  > dd_version   : [STR] Version Dragon
#----------------------------------------------------------
# Input DRAGON XSM files
#  > ImpLibrary   : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_Lib.xsm
#                   [path] "$1"/../save/
#  > ImpBurnup    : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_Burnup.xsm
#                   [path] "$1"/../save/
#  > ConcMode     : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_ConcMode.xsm
#                   [path] "$1"/../save/
#  > Info         : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_Info.xsm
#                   [path] "$1"/../save/
#==========================================================
accessname=$(basename $0 | cut -d"." -f1)
if [ $# = 0 ]
   then
   echo "usage: "$accessname".access directory" 1>&2
   exit 1
fi
echo -e "\nExecute ${accessname}.access script\n"

#----------------------------------------------------------
# USER-DEFINED PARAMETERS
#----------------------------------------------------------

#--- EvoName
EvoName="TIH_UOX_310"
#--- NuclData
NuclData=$(grep --color=none "STRING  NuclData" mydata | cut -d"=" -f2 | cut -d";" -f1 | tr -d " " | tr -d '"')
#--- NumHistCalc
NumHistCalc=$(grep "INTEGER NumHistCal :=" mydata | awk '{print $4}')
#--- ListIsoPart
# It is retrieved from the input file .x2m
ListIsoPart=$(grep "STRING ListIsoPart" mydata | awk '{print $4}' | tr -d '"')
#--- mydata
# By default is an environmental variable defined by 'dragon' script
#--- dd_version
# By default is an environmental variable defined by 'dragon' script

#----------------------------------------------------------
# Copy PROCEDURES (.c2m) in RUNDIR
#----------------------------------------------------------
cp "$1"/../proc/*.c2m .

#----------------------------------------------------------
# Link additional NUCLEAR LIBRARIES
#----------------------------------------------------------
# The nuclear data libraries are linked to rundir through the script 'tdraglib.access'
# (by default is launched by the script 'dragon')

#--- link to lib: JEFF-3.1.1 (NJOY2016)
rm -f D172JEFF311
ln -s "$1"/../../../../draglibJeff3.1.1_PyNjoy2016 D172JEFF311

#----------------------------------------------------------
# OPTION-DEFINED PARAMETERS
#----------------------------------------------------------

#--- Extract parameters from 'dd_version'
if [ ! -z $(echo $dd_version | grep -o "\." | head -1) ] # Au moins un '.' dans le nom de la version -> version figee de type v{4|5}.X.Y
then
  Fixed="YES"
  Vers=$(echo $dd_version | cut -d"." -f1)
  Evol=$(echo $dd_version | cut -d"." -f2)
  Spec=$(echo $dd_version | cut -d"." -f3)
else # pas de '.' dans le nom de la version -> version en evolution de type v{4|5{a|b}}evXXXX[_SPEC]
  Fixed="NO"
  Vers=$(echo $dd_version | cut -d"e" -f1)
  Evol=$(echo $dd_version | cut -d"v" -f3 | cut -d"_" -f1)
  if [ ! -z $(echo $dd_version | grep -o "_" | head -1) ] # Au moins un "_" est present dans le nom de la version -> _SPEC
  then
    Spec=$(echo $dd_version | cut -d"_" -f2)
  else # pas de "_" dans le nom de la version -> pas de _SPEC (sera nomme "NONE")
    Spec="NONE"
  fi
fi

#--- Extract parameters from 'EvoName'
IFS='_-' read -ra elem <<< "$EvoName"
Gestion=${elem[0]}
AssType=${elem[1]}
if [[ "$AssType" = "UGd" ]]; then
  InfoGado="12Gd"
elif [[ "$AssType" = "UGd8"  ]]; then
  InfoGado="8Gd"
fi
Teneur_I=${elem[2]}
ConfigPyrex=${elem[${#elem[@]}-1]}
if [ "${ConfigPyrex:0:2}" != "Py" ]; then
  ConfigPyrex="None"
fi

#--- Extract parameters from 'NumHistCalc'
if [ "$((NumHistCalc))" -gt 0 ]; then
  HistSFX="_H$(printf "%02d" "${NumHistCalc#0}")"
fi

#--- Extract parameters from 'NuclData'
LibType=$(echo $NuclData | sed "s/^D[0-9]*//g")

# Definition des isotopes a exclure ou inclure selon les bibliotheques
#   - ATTENTION au majuscules/minuscules. Si isotope deja defini dans le calcul d'evolution,
#   - il a ete nomme selon la norme IsoXXX. Sinon il doit etre ecrit en majuscules comme dans l'APOLIB.
#   - An index called 'idxCsv' is defined to perform the conversion of the particularized isotope names
#    according to the type of library

if [ "$LibType" = "JEFF31" ]   || [ "$LibType" = "JEFF311" ]  || [ "$LibType" = "JEFF312" ] || \
   [ "$LibType" = "ENDFVII0" ] || [ "$LibType" = "ENDFVII1" ] || \
   [ "$LibType" = "ENDFVI8" ]  || [ "$LibType" = "JEF22" ]; then
        # Liste d'isotopes a exclure (de l'appel a LIB)
        if [ "$LibType" = "ENDFVI8" ]  || [ "$LibType" = "JEF22" ]; then
             isoAExclure=( 'H2O' "Zr90" "Zr91" "Zr92" "Zr93" "Zr94" "Zr95" "Zr96" "In113")
        elif [ "$LibType" = "JEFF31" ]   || [ "$LibType" = "JEFF311" ]  || [ "$LibType" = "JEFF312" ] || \
             [ "$LibType" = "ENDFVII0" ] || [ "$LibType" = "ENDFVII1" ]; then
             isoAExclure=( 'H2O' 'ZrNat')
        fi
        # Index CSV
        idxCsv=2
else
        echo "La bibliotheque renseignee dans la variable NuclData ($NuclData, de type $LibType) du .access est inconnue au bataillon."
        exit 1
fi

#----------------------------------------------------------
# Definition of the list of particularised isotopes
#----------------------------------------------------------
# A CSV file is available in directory /proc/ to allow the
# conversion of the name of the particularized isotopes with
# respect of the type of library.
# The file is composed of 5 columns :
# idx,NM_STD,NM_JE
# Starting from column #2 they refers to :
#   - NM_STD   : Standard reference name based on IsoXXX
#   - NM_JE    : JEF*,ENDF*
# The separator is a semicolumn (sep=";")
#----------------------------------------------------------

#--- Name CSV file
fileisotcsv="$1/../proc/isotconvlist.csv"

#--- 'repliso'
# A function called 'repliso' is defined to replace the standard
# reference name with the library name included in the CSV file
#---
repliso(){
   local ARRAY=("${!1}")
   local FILEINP=$2
   local IDXREPL=$3
   for iso in "${ARRAY[@]}"; do
    line=$(grep $iso $FILEINP)
    IFS=';' read -ra elem <<< "$line"
    nameiso="${elem[$IDXREPL]}"
    ARRAY=( "${ARRAY[@]/$iso/$nameiso}" )     # Attention with pattern matches
   done
   printf "%q " "${ARRAY[@]}"
}

#--- Lists of particularised isotopes
# Define the list of particularised isotopes that are stored in the
# multi-parameter library.
# The available choices are :
#   - LNR (10+1 isotopes)
#   - EDF (35+1 isotopes)
#   - ALL
# References :
#   - Verification of the Cocagne core using cluster depletion calculations
#     (Hoareau et alt.)
#   - New core calculation chain of EDF: multigroup calculations and impact
#     study of the isotope chain on core calculations
#     (Palak Jain)
#   - Study of historical effects in multi-parameter interpolation
#     (Marie Decroocq)
# Notes :
#   - To avoid issues in the isotope's name conversion, a white space should
#     be included when the name of an isotope is contained in another isotope's
#     name.
#     (Ex. Pm148 has to be written as 'Pm148 ' to prevent conflits with Pm148m)
#---
wsedi=$(printf "%16s" " ")  # whitespaces EDI print
wslib=$(printf "%16s" " ")  # whitespaces SAP/MCO print

case "$ListIsoPart" in
  "LNR")
      IsoPartic=(
        # Burnable absorber
        'B10' 'B11'
        # Fission Products (Xenon and Samarium chain isotopes)
        'Xe135' 'I135'
        'Nd147' 'Pm147' 'Pm148 ' 'Pm148m' 'Pm149' 'Sm149'
        # Other
        'U5DET'
        )
      IsoHeavy=(
        # Heavy isotopes (actinides)
        'U235' 'U238' 'Pu239' 'Pu240' 'Pu241' 'Pu242' 'Am241' 'Am242m'
        )
      IsoEdi=("${IsoPartic[@]}" "${IsoHeavy[@]}")

      #--- Convert Isotope's names
      IsoPartic=($(repliso IsoPartic[@] $fileisotcsv $idxCsv))
      IsoEdi=($(repliso IsoEdi[@] $fileisotcsv $idxCsv))
      #--- Define printing format in mydata
      printEdiIsot+="${#IsoEdi[@]}" ; for iso in ${IsoEdi[@]} ; do printEdiIsot+=$(echo "\n${wsedi}${iso}"); done
      for iso in ${IsoPartic[@]} ; do printSapIsot+=$(echo "\n${wslib}${iso}"); done
      printMcoIsot+="${#IsoPartic[@]}" ; for iso in ${IsoPartic[@]} ; do printMcoIsot+=$(echo "\n${wslib}${iso}"); done
      ;;
  "EDF")
      IsoPartic=(
        # Burnable absorber
        'B10' 'B11'
        # Fission Products (Xenon and Samarium chain isotopes)
        'Xe135' 'I135'
        'Nd147' 'Pm147' 'Pm148 ' 'Pm148m' 'Pm149' 'Sm149' 'Sm147' 'Sm148' 'Sm150' 'Nd146' 'Nd148'
        # Heavy isotopes (actinides)
        'U234' 'U235' 'U236' 'U237' 'U238' 'Pu238' 'Pu239' 'Pu240' 'Pu241' 'Pu242' 'Am241' 'Am242m'
        'Np237' 'Np238' 'Np239' 'Am243' 'Cm242' 'Cm243' 'Cm244' 'Cm245'
        # Other
        'U5DET'
        )
      IsoEdi=("${IsoPartic[@]}")

      #--- Convert Isotope's names
      IsoPartic=($(repliso IsoPartic[@] $fileisotcsv $idxCsv))
      IsoEdi=($(repliso IsoEdi[@] $fileisotcsv $idxCsv))
      #--- Define printing format in mydata
      printEdiIsot+="${#IsoEdi[@]}" ; for iso in ${IsoEdi[@]} ; do printEdiIsot+=$(echo "\n${wsedi}${iso}"); done
      for iso in ${IsoPartic[@]} ; do printSapIsot+=$(echo "\n${wslib}${iso}"); done
      printMcoIsot+="${#IsoPartic[@]}" ; for iso in ${IsoPartic[@]} ; do printMcoIsot+=$(echo "\n${wslib}${iso}"); done
      ;;
  "ALL")
      IsoPartic=('ALL')
      printSapIsot="TOUT"
      printEdiIsot="ALL"
      ;;
  *)
      echo "Invalid ListIsoPart " $ListIsoPart
      exit 1
      ;;
esac

#----------------------------------------------------------
# Modification INPUT .x2m
#----------------------------------------------------------
# In-place modification of the temporary input copy in rundir

sed -i "s/#LibType/$LibType/g" mydata
sed -i "s/#VER/$Vers/g"        mydata
sed -i "s/#EVO/$Evol/g"        mydata
sed -i "s/#SPC/$Spec/g"        mydata
sed -i "s/#FXD/$Fixed/g"       mydata

# Mise en commentaire des isotopes prealablement definis
i=0
echo "Nombre d'isotopes a exclure : ${#isoAExclure[@]}"
while [ "$i" -lt "${#isoAExclure[@]}" ] ; do
        echo " - ${isoAExclure[i]}"

        # Exclusion de la ligne contenant l'isotope a exclure
        sed -i '/ '"${isoAExclure[i]}"' /{s/^ /!/}' mydata

        i=$(($i+1))
done

# Definition des isotopes particularises et des isotopes a rendement de fission generant les isotopes particularises
echo "Isotopes a Particulariser   : ${#IsoPartic[@]}"
for iso in ${IsoPartic[@]} ; do echo " - ${iso}"; done

sed -i "s/#printEdiIsot/$printEdiIsot/g"   mydata
sed -i "s/#printSapIsot/$printSapIsot/g"   mydata
sed -i "s/#printMcoIsot/$printMcoIsot/g"   mydata

#----------------------------------------------------------
# Copy XSM files generated by EvoNominale.x2m
#----------------------------------------------------------
cp "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_Lib.xsm      ImpLibrary
cp "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_Burnup.xsm   ImpBurnup
cp "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_ConcMode.xsm ConcMode
cp "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_Info.xsm     Info

#----------------------------------------------------------
# Listing RUNDIR
#----------------------------------------------------------
echo
echo "Liste des fichiers dans le repertoire RUNDIR: "
ls -ltr

#----------------------------------------------------------
echo -e $accessname".access script terminated\n"
