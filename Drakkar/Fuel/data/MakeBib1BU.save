#!/bin/bash
#==========================================================
# Name         : MakeBib1BU.save
# Type         : BASH script
# Use          : Save output from Dragon calculation
# Author       : Various
#----------------------------------------------------------
# Note
#   The positional parameter "$1" contains the path to the directory
#   where the input file .x2m is stored (by default XXX/data/. )
#----------------------------------------------------------
# Mandatory Arguments
#  > BibLoc       : [STR] Path towards the directory where the SAPHYB/MULTICOMPO is stored
#  > JobInfo      : [STR] Path towards the text file containing information with regards to the job status
#  > STEP         : [INT] Index burnup step
#  > mydata       : [STR] Name input file Dragon
#  > dd_version   : [STR] Version Dragon
#----------------------------------------------------------
# Output DRAGON XSM files
#  < SAP/MCO      : [name] [Sap|Mco]_[Gestion]_[AssType][Teneur]{_[Gado|ConfigPyrex]}_[dd_version]{_[HistSFX]}_[BurnSFX]
#                   [path] $BibLoc/[Gestion]_[AssType]_[Teneur]{_[Gado|ConfigPyrex]}_[NuclData]
#----------------------------------------------------------
# Output TEXT files
#  < JOBINFO      : [name] JobInfo_[$USER]_[$HOSTNAME]_[EvoName]_[NuclData]_[dd_version]_[RightNow]{_[HistSFX]}.txt
#                   [path] $1/../logs/[Gestion]_[AssType]_[Teneur]{_[Gado|ConfigPyrex]}_[NuclData]
#  < KINFO        : [name] kinf_[$USER]_[$HOSTNAME]_[EvoName]_[NuclData]_[dd_version]_[RightNow]{_[HistSFX]}_[BurnSFX].txt
#                   [path] "$1"/../kinf/MakeSap1BU/[Gestion]_[AssType]_[Teneur]{_[Gado|ConfigPyrex]}_[NuclData]
#==========================================================
savename=$(basename $0 | cut -d"." -f1)
if [ $# = 0 ]
   then
   echo "usage: "$savename".save directory" 1>&2
   exit 1
fi
echo -e "\nExecute ${savename}.access script\n"

#----------------------------------------------------------
# USER-DEFINED PARAMETERS
#----------------------------------------------------------

#--- BibLoc
BibLoc="#PATHTOLIB"
#--- JobInfo
# A unique file is created for all the BU steps that are run
# with the same call to the script.
JobInfo=#JOBINFO
#--- STEP
STEP=$(grep "INTEGER bu_index" mydata | awk '{print $4}')
#--- mydata
# It is an environmental variable defined by 'dragon' script
#--- dd_version
# It is an environmental variable defined by 'dragon' script

#----------------------------------------------------------
# Create K-INF file .txt
#----------------------------------------------------------
# A text file is generated containing the k-infinitive values
# from Dragon calculation that are printed in the .result file
# According to the end status, the following info are included
# in the K-INF file .txt :
#   - NORMAL END     : Normal end message
#   - NOT NORMAL END : NOT normal end message
#                      Tail (-10) of the .result
# The NOT NORMAL END message is included into KINFO to simplify the
# tracking of failed branching calculations
#----------------------------------------------------------

#--- Define location and name K-INF file (use basename of JobInfo.txt)
Dirkinf="../kinf/MakeBib1BU"
kinfNam="${JobInfo##*/}"
kinfNam="${kinfNam//JobInfo/kinf}"
kinfNam="${kinfNam//.txt/_$STEP.txt}"
kinfPath="$1"/"$Dirkinf"/"$kinfNam"

#--- Prepare $Dirkinf directory
if [ ! -d "$1"/"$Dirkinf" ]; then
    mkdir -p "$1"/"$Dirkinf"
fi

#--- Retrieve values from output file .result
dmod_nom=($(grep '>|#NOM'  "$savename".result | awk '{print $2}'))
cbor_nom=($(grep '>|#NOM'  "$savename".result | awk '{print $3}'))
barr_nom=($(grep '>|#NOM'  "$savename".result | awk '{print $4}'))
tcom_nom=($(grep '>|#NOM'  "$savename".result | awk '{print $5}'))
iter_ARR=($(grep '>|#KINF' "$savename".result | awk '{print $3}'))
Kinf_ARR=($(grep '>|#KINF' "$savename".result | awk '{print $5}'))
dmod_ARR=($(grep '>|#PARA' "$savename".result | awk '{print $3}'))
cbor_ARR=($(grep '>|#PARA' "$savename".result | awk '{print $5}'))
barr_ARR=($(grep '>|#PARA' "$savename".result | awk '{print $7}'))
tcom_ARR=($(grep '>|#PARA' "$savename".result | awk '{print $9}'))

#--- Write K-INF file .txt
# Preamble
printf "FILENAME   : %s\n" "${savename//Tmp_/}".result    > $kinfPath
printf "END OF RUN : %s\n" "$(date +'%d/%m/%Y %H:%M:%S')" >> $kinfPath
# Operation parameters applied in depletion calculation
printf "\nDEPLETION CONDITIONS"                   >> $kinfPath
printf "\n  造 BARR : %d    " $barr_nom            >> $kinfPath
printf "\n  造 DMOD : %s %s " $dmod_nom "[g/cm3]"  >> $kinfPath
printf "\n  造 CBOR : %s %s " $cbor_nom "[ppm]"    >> $kinfPath
printf "\n  造 TCOM : %s %s " $tcom_nom "[degC]"   >> $kinfPath
# Table K-INF vs Burnup vs Branching parameters
printf "\n\n%8s%13s%13s%13s%13s%13s\n" \
       "No. ITER" "K-EFFECTIVE"          "BARR" "DMOD [g/cm3]"   "CBOR [ppm]"  "TCOM [degC]" >> $kinfPath
printf "%8s%13s%13s%13s%13s%13s\n" \
       "--------" "------------" "------------" "------------" "------------" "------------" >> $kinfPath
for i in "${!iter_ARR[@]}" ; do
  printf "%8d%13.6e%13.6e%13.6e%13.6e%13.6e\n" \
  "${iter_ARR[$i]}" "${Kinf_ARR[$i]}" "${barr_ARR[$i]}" "${dmod_ARR[$i]}" "${cbor_ARR[$i]}" "${tcom_ARR[$i]}" >> $kinfPath
done ; unset i

#==========================================================
# ANALYSIS END STATUS
#==========================================================

#--- Check if NORMAL END of calculation
mapfile -t NormalEnd < <(grep -iF "normal end of execution for" $savename.result)
#--- Check WARNINGS of calculation
mapfile -t TestWarning < <(grep -F ">|#WARNING" $savename.result)

#======================================= *** NORMAL END ***
if [ ! -z "$NormalEnd" ]; then

#--- List files in rundir
echo "List of files in rundir : "
ls -ltr

#--- Additional calculation parameters
# They are retrieved from the output file .result (only with NORMAL END status)
#---
Gestion=$(grep --color=none ">|Bib Gestion:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
AssType=$(grep --color=none ">|Bib AssType:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
Teneur=$(grep --color=none ">|Bib Teneur:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
Gado=$(grep --color=none ">|Bib InfoGado:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
ConfigPyrex=$(grep --color=none ">|Bib ConfigPyrex:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
NuclData=$(grep --color=none ">|Bib NuclData:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
NOML=$(grep --color=none ">|Bib NOML:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
#STEP=$(grep --color=none ">|Bib STEP:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")
# IFS='_-' read -ra elem <<< "$savename" ; bu=${elem[${#elem[@]}-1]} # >>> Alternative : Recover BU step value from 'savename'
NumHistCalc=$(grep --color=none ">|Bib HIST:" $savename.result | grep -v "ECHO" | cut -d"|" -f2 | cut -d":" -f2 | tr -d " ")

#------------------------------------------------------
# Define SAPHYB/MULTICOMPO
#------------------------------------------------------

#--- Suffix BURNUP steps
#    Add 0 if STEP <10
BurnSFX="_B$(printf "%02d" "${STEP#0}")"

#--- Suffix HISTORY calculations
if [ "$((NumHistCalc))" -gt 0 ]; then
  HistSFX="_H$(printf "%02d" "${NumHistCalc#0}")"
fi

#--- Build name SAPHYB/MULTICOMPO
libDir="${Gestion}_${AssType}_${Teneur}"
if [ -z "$Gado" ]; then                                 # No GADO
  if [ ! -z "$ConfigPyrex" ]; then                      # No PYREX
    libDir="${libDir}_${ConfigPyrex}"
  fi
else
  libDir="${libDir}_${Gado}"
fi
libDir+="_${NuclData}"                                  # DIRECTORY NAME
libNam="${NOML}_${dd_version}${HistSFX}${BurnSFX}"      # SAP/MCO NAME
DirPath="$BibLoc"/"$libDir"                             # FULL PATH SAP/MCO
BibPath="$DirPath"/"$libNam"

#--- Create SAPHYB/MULTICOMPO DIRECTORY
if [[ ! -d $DirPath ]]; then
  echo "Creation of directory $DirPath "
  mkdir -p $DirPath
fi

#--- Store SAPHYB/MULTICOMPO in SAPHYB/MULTICOMPO DIRECTORY
echo " mv Bib_1BU $BibPath"
mv Bib_1BU "$BibPath"
chmod 755 "$BibPath"

#------------------------------------------------------
# Feed JobInfo
#------------------------------------------------------
cat <<-EOF >> $JobInfo
$nl
Job qsub numero : $STEP
--------------------
Machine : $HOSTNAME
Rundir  : $(echo $PWD)
Statut final du job DRAGON : $NormalEnd
SAPHYB creee : $BibPath
EOF

#--- Print WARNINGS
if [ ! -z "$TestWarning" ]; then
 printf "Attention! Une option qui n'est pas par defaut a ete activee :" >> $JobInfo
 for wrn in "${TestWarning[@]}"; do
   printf "       - %s\n" "$wrn" >> $JobInfo
 done
fi; unset wrn

#----------------------------------------------------------
# End of normal end of calculation
echo -e $savename".save completed at burnup step "$STEP"."

#=================================== XXX NOT NORMAL END XXX
else

#----------------------------------------------------------
# Feed JobInfo and kinfPath
#----------------------------------------------------------

cat <<EOF >> $JobInfo
$nl
Job qsub numero : $STEP
--------------------
Machine : $HOSTNAME
Rundir  : $(echo $workdir)
WARNING! NOT NORMAL END! No SAPHYB produced. Check $savename.result
Statut final du job DRAGON :
$(tail -10 $savename.result)
EOF

printf "\nWARNING! NOT NORMAL END!\n"   >> $kinfPath
printf "Statut final du job DRAGON :\n" >> $kinfPath
tail -10 $savename.result               >> $kinfPath
#----------------------------------------------------------
# End of NOT NORMAL END calculation
echo "NOT 'NORMAL END!' NOTHING DONE IN .save at burnup step "$STEP"."

fi
