#!/bin/bash
#==========================================================
# Name         : EvoNominale.save
# Type         : BASH script
# Use          : Save output from Dragon calculation
# Author       : Various
#----------------------------------------------------------
# Note
#   The positional parameter "$1" contains the path to the directory
#   where the input file .x2m is stored (by default XXX/data/. )
#----------------------------------------------------------
# Mandatory Arguments
#  > ComplEvo     : [STR] Fuel assembly identifier
#                         [Gestion]_[AssType]_[Teneur](-[ConfigPyrex])_[NuclData]
#  > NumHistCalc  : [INT] Depletion index
#  > mydata       : [STR] Name input file Dragon
#  > dd_version   : [STR] Version Dragon
#----------------------------------------------------------
# Output DRAGON XSM files
#  < ExpLibrary   : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_Lib.xsm
#                   [path] "$1"/../save/
#  < ExpBurnup    : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_Burnup.xsm
#                   [path] "$1"/../save/
#  < ExpConcMode  : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_ConcMode.xsm
#                   [path] "$1"/../save/
#  < ExpInfo      : [name] ${EvoName}_${NuclData}_${dd_version}{[HistSFX]}_Info.xsm
#                   [path] "$1"/../save/
#----------------------------------------------------------
# Output files .txt
#  < KINFO        : [name] kinf_[EvoName]_[dd_version].txt
#                   [path] "$1"/../kinf/EvoNominale/
#  < FAIL         : [name] tail_[savename//Tmp/]
#                   [path] "$1"/../failed/EvoNominale/
#==========================================================
savename=$(basename $0 | cut -d"." -f1)
if [ $# = 0 ]
   then
   echo "usage: "$savename".save directory" 1>&2
   exit 1
fi
echo -e "\nExecute ${savename}.access script\n"

#----------------------------------------------------------
# USER-DEFINED PARAMETERS
#----------------------------------------------------------

#--- ComplEvo
# It is retrieved from the output file .result
ComplEvo=$(grep '>|Evolution completed:' "$savename".result | awk '{print $3}')
#--- NumHistCalc
# It is retrieved from the output file .result
NumHistCalc=$(grep "INTEGER NumHistCal" "$savename".result | awk '{print $4}')
#--- mydata
# It is an environmental variable defined by 'dragon' script
#--- dd_version
# It is an environmental variable defined by 'dragon' script

#----------------------------------------------------------
# Definition of PARAMETERS
#----------------------------------------------------------

#--- Extract parameters from 'ComplEvo'
IFS='_-' read -ra elem <<< "$ComplEvo"
Gestion=${elem[0]}
AssType=${elem[1]}
Teneur_I=${elem[2]}
if [[ "$AssType" = "UGd" ]]; then
  InfoGado="12Gd"
elif [[ "$AssType" = "UGd8"  ]]; then
  InfoGado="8Gd"
fi
ConfigPyrex=${elem[3]}
if [ "${ConfigPyrex:0:2}" != "Py" ]; then
  ConfigPyrex="None"
fi
NuclData=${elem[${#elem[@]}-1]}
EvoName="${ComplEvo//_$NuclData/}"

#--- Extract parameters from 'NumHistCalc'
if [ "$((NumHistCalc))" -gt 0 ]; then
  HistSFX="_H$(printf "%02d" "${NumHistCalc#0}")"
fi

#==========================================================
# ANALYSIS END STATUS
#==========================================================

#--- Check if NORMAL END of calculation
mapfile -t NormalEnd < <(grep -iF "normal end of execution for" $savename.result)
#--- Check WARNINGS of calculation
mapfile -t TestWarning < <(grep -F ">|#WARNING" $savename.result)

#======================================= *** NORMAL END ***
if [ ! -z "$NormalEnd" ]; then

    #--- List files in rundir
    echo "List of files in rundir : "
    ls -ltr

    #--- Prepare save directory
    if [ ! -d "$1"/../save ]; then
        mkdir "$1"/../save
    fi

    #------------------------------------------------------
    # Preserve XSM output files
    #------------------------------------------------------
    mv ExpLibrary  "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_Lib.xsm
    mv ExpBurnup   "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_Burnup.xsm
    mv ExpConcMode "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_ConcMode.xsm
    mv ExpInfo     "$1"/../save/"${EvoName}_${NuclData}_${dd_version}${HistSFX}"_Info.xsm

    #------------------------------------------------------
    # Create K-INF file .txt
    #------------------------------------------------------
    # A text file is generated containing the k-infinitive values
    # from Dragon calculation that are printed in the .result file
    # If warnings are detected, the are appended at the end of the
    # file .txt
    #------------------------------------------------------

    #--- Define location and name K-INF file
    Dirkinf="../kinf/EvoNominale"
    kinfPath="$1"/"$Dirkinf"/kinf_"${EvoName}_${NuclData}_${dd_version}${HistSFX}".txt

    #--- Create a backup copy of the last K-INF file
    if [ -f "$kinfPath" ]; then
        cp "$kinfPath" "${kinfPath//.txt/.bak}"
    fi

    #--- Prepare $Dirkinf directory
    if [ ! -d "$1"/"$Dirkinf" ]; then
        mkdir -p "$1"/"$Dirkinf"
    fi

    #--- Retrieve values from output file .result
    dmod=($(grep '>|#PARA' "$savename".result | awk '{print $3}'))
    cbor=($(grep '>|#PARA' "$savename".result | awk '{print $5}'))
    BarType=($(grep '>|#PARA' "$savename".result | awk '{print $7}'))
    tcom=($(grep '>|#PARA' "$savename".result | awk '{print $9}'))
    Burn_ARR=($(grep '>|#KINF' "$savename".result | awk '{print $3}'))
    Kinf_ARR=($(grep '>|#KINF' "$savename".result | awk '{print $5}'))

    #--- Write K-INF file .txt
    # Preamble
    printf "TITLE         : %s\n" "$ComplEvo"                    > $kinfPath
    printf "IDX DEPLETION : %s\n" "$NumHistCalc"                 >> $kinfPath
    printf "END OF RUN    : %s\n" "$(date +'%d/%m/%Y %H:%M:%S')" >> $kinfPath
    # Operation parameters applied in depletion calculation
    printf "\nDEPLETION CONDITIONS"                 >> $kinfPath
    printf "\n  造 BARR : %d    " $BarType           >> $kinfPath
    printf "\n  造 DMOD : %s %s " $dmod    "[g/cm3]" >> $kinfPath
    printf "\n  造 CBOR : %s %s " $cbor    "[ppm]"   >> $kinfPath
    printf "\n  造 TCOM : %s %s " $tcom    "[degC]"  >> $kinfPath
    # Table K-INF vs Burnup
    printf "\n\n%5s%13s%13s\n%5s%13s%13s\n" \
           "STEP" "EXP [MW-d/t]" "K-EFFECTIVE" "-----" "------------" "------------" >> $kinfPath
    for bu in "${!Burn_ARR[@]}" ; do
        printf "%5d%13.6e%13.6e\n" "$((bu+1))" "${Burn_ARR[$bu]}" "${Kinf_ARR[$bu]}" >> $kinfPath
    done ; unset bu
    # Warnings
    if [ ! -z "$TestWarning" ]; then
      printf "\n\nAttention! Une option qui n'est pas par defaut a ete activee :" >> $kinfPath
      for wrn in "${TestWarning[@]}"; do
        printf "       - %s\n" "$wrn" >> $kinfPath
      done
    fi; unset wrn

    #--- End of normal end of calculation
    echo -e $savename".save completed\n"

#=================================== XXX NOT NORMAL END XXX
else
    echo "NOT 'NORMAL END!' NOTHING DONE IN .save"

    #--- Define location failed calculations
    Dirfail="../failed/EvoNominale"
    failPath="$1/$Dirfail/tail_${savename//Tmp_/}.result"

    #--- Write failed calculation report
    printf "\nWARNING! NOT NORMAL END!\n"   >  $failPath
    printf "Statut final du job DRAGON :\n" >> $failPath
    tail -50 $savename.result               >> $failPath

fi
