*---
*  Execution command line : dragon MakeBib1BU.x2m v5bev2194
*---
*======================================================================
* Name:   MakeBib1BU.x2m
* Type:   DRAGON File
* Use:    Creation de SAPHYB a 1 pas de burnup
* Author: A. Bruneau 2013, 2014, 04.2015, 07.2015, 08.2015
*         [CS-SI | IRSN/PSN-EXP/SNC/LNR]
*----------------------------------------------------------------------
* Dragon: v5bev1058
*----------------------------------------------------------------------
* Procedures DRAGON contenues dans DRAGON/HEMERA/proc:
*       - CreaStepList: Creation des listes de parametres et pas de burnup
*       - Geo17x17 et Geo15x15: Modelisation de la geometrie + trackings associes
*
* ATTENTION! La variable "bu_index" est initialisee par un mot-cle "REPL" (script local)
*            A remplacer par l'indice du pas de burnup voulu dans LINKED_LIST StepList 'Burnup' et 'BurnStep'
*
* ATTENTION! Bien verifier que les objets importes sont bien les bons (.access)
*            Les objets necessaires a importer depuis le calcul d'evolution nominale sont:
*            - ImpBurnup  : Objet L_BURNUP en sortie d'evolution nominale
*            - ImpLibrary : Objet L_LIBRARY cree lors du 1er appel LIB: dans la procedure CreaMix.c2m. Bib interne
*            - ConcMode   : Table des concentrations H2O, B10 et B11 pour chaque mix (calculs de CBOR et DMOD).
*            - Info       : Table contenant differentes informations sur l'assemblage
*                          (l'equivalence MWj/t-JEPP, le type d'assemblage, la gestion..;)
*
* AMELIORATIONS TEMPS CPU
*    EDI: USS: et EQU: representent ~80% du temps cpu
*    - Option MICR ALL supprimee en gardant que les isotopes particularises a inclure dans la SAPHYB (EDI:)
*    - Autoprotection spatiale detaillee de l'U-238 et moyenne pour le reste (USS:)
*    - ImpLibrary -> copie en LINKED_LIST (EQU:)
*    A noter: iterations flux-courant (ARM) dans USS coute du temps cpu au lieu d'en gagner!
*======================================================================
* STRUCTURES et MODULES utilises
*-------------------------------------------------
PROCEDURE   CreaStepList Geo15x15 CreaGeoHom ModDet35
            Autop ;
MODULE      LIB: GEO: SYBILT: USS: ASM: FLU: EDI: SAP: SPH:
            TRIVAT: COMPO: EVO: UTL: GREP: ABORT: DELETE: END: ;
LINKED_LIST Assmb AssmbAu Discr DiscrAu
            Library CP Calc Out
            OutCPC Burnup StepList LibraryAu
            SaphybStep CompoStep
            GeoAssTriv GeoAssHom
            GeoCPCPlie GeoCPCDeplie
            TrackAss  ;
XSM_FILE    ImpBurnup :: FILE 'ImpBurnup' ;
XSM_FILE    ImpLibrary :: FILE 'ImpLibrary' ;
XSM_FILE    ConcMode :: FILE 'ConcMode' ;
XSM_FILE    Info :: FILE 'Info' ;
XSM_FILE    Bib_1BU :: FILE 'Bib_1BU' ;

*-------------------------------------------------------
*  Local parameters
*-------------------------------------------------------
LOGICAL True False   := $True_L $False_L ;

*=======================================================
* USER-DEFINED CALCULATION OPTIONS
*-------------------------------------------------------
* These calculation option are defined directly by the user
* in the input file
* The committed version is pre-compiled with the default options
*-------------------------------------------------------

*---
* Equivalence SPH
* - "Toujours"   : l'equivalence SPH est systematiquement realisee
* - "GrappeSlmt" : l'equivalence SPH est realisee seulement pour
*                  les cas grappes
*---
STRING SPH := "Toujours" ;

*---
* Traitement des assemblages Hafnium
* Par defaut, ce mot-cle est fixe a "NON"
*---
STRING HF := "Non" ;     ! ??? CHECK IF TO PASS WITH INFO.XSM !!!!

*---
* Option detector XS (U235):
*   IRIT - Use Inner Rod IT weighting integrated flux
*      * - Use Assembly weighting integrated flux
* Par defaut, ce mot-cle est fixe a "COMP" (keyword EDI: module)
*---
STRING  OptDet35 := "NONE" ;

*---
* Select the matrix structure used to build the
* multi-parameter library
* The options available are defined in CreaStepList.c2m
* By default an identical branch structure is defined for
* nominal and off/nominal depletions.
*---
STRING TypeMatrix := "N" ;    ! [N/PAR-BEAV/TEST]

*---
* Flag for historic global parameters
* Option to add the historic global parameters inside
* the multi-parameter libary
*---
LOGICAL OptMatrixHis  := False ; ! True or False

*---
* Define the list of particularised isotopes to be stored
* in the multi-parameter library.
* Available choices :
*   - LNR (10+1 isotopes)
*   - EDF (35+1 isotopes)
*   - ALL
*---
STRING ListIsoPart := "LNR" ; ! [LNR/EDF/ALL]

*=======================================================
* SCRIPT-DEFINED CALCULATION OPTIONS
*-------------------------------------------------------
* ATTENTION! Les valeurs des variables seront modifiees
* dans le repertoire d'execution
*-------------------------------------------------------

*---
* Informations sur la version et l'evolution de DRAGON utilisee
* Version de DRAGON utilisee dans ce jdd
* [Check .access]
*---
STRING  MkBibVers := "#VER" ; ! v4, v5, v5a ou v5b
INTEGER MkBibEvol := #EVO   ; ! Numero d'evolution
STRING  MkBibSpec := "#SPC" ; ! Suffixe (ex: PARCS pr v5aev888_PARCS)
STRING  Fixed     := "#FXD" ; ! version figee ou non (YES or NO)

*---
* Format of the multi-parameter library
* Choice between SAPHYB or MULTICOMPO
*---
STRING  BiblXS   := "SAPHYB"   ;

*---
* Selection de la bibliotheque de donnees nucleaires
* a utiliser
*---
STRING  NuclData := "#NuclData" ;
STRING  LibType  := "#LibType" ;

*---
* Historical calculation
* Define number Nominal/Off-Nominal depletion
* Be aware that : NumHistCal=0 => base (nominal) depletion
*---
INTEGER NumHistCal := 0 ;

*=======================================================
* INFO-DEFINED CALCULATION OPTIONS
*-------------------------------------------------------
* These calculation option are retrieved from the
* Info.xsm LCM object created in EvoNominale.x2m
* Aim to preserve the consistency between EvoNominale.x2m and
* MakeBib1BU.x2m
*-------------------------------------------------------

*--- Informations sur l'assemblage
REAL   Norm_MWT    ;
STRING AssType ;     ! MOX, UOX ou UGd
STRING ConfigPyrex ; ! None, Py8 ou Py12
STRING Gestion     ; ! TIH, BEAV
STRING Teneur      ; ! U5 [%m] pour UOX, UPu [%m] pour MOX, sans '.'
STRING InfoGado    ; ! Infos sur le gado [12Gd, etc...]

GREP: Info :: GETVAL 'NORM_MWT' 1   >>Norm_MWT<<    ;
GREP: Info :: GETVAL 'TYPE    ' 1 4 >>AssType<<     ;
GREP: Info :: GETVAL 'CONFPYRX' 1 8 >>ConfigPyrex<< ;
GREP: Info :: GETVAL 'GESTION ' 1 4 >>Gestion<<     ;
GREP: Info :: GETVAL 'TENEUR  ' 1 3 >>Teneur<<      ;
IF AssType "UGd" = AssType "UGd8" = + THEN
  GREP: Info :: GETVAL 'INFOGADO' 1 4 >>InfoGado<< ;
ENDIF ;

*--- Version de DRAGON utilisee pour le calcul d'evolution nominale
STRING  EvNomVers EvNomSpec ;
INTEGER EvNomEvol ;

IF Fixed "YES" = THEN
  GREP: Info :: GETVAL 'VERSSPEC' 1 2 >>EvNomVers<< ;
  GREP: Info :: GETVAL 'VERSSPEC' 5 5 >>EvNomSpec<< ;
  GREP: Info :: GETVAL 'EVOLDRAG' 1   >>EvNomEvol<< ;
ELSE
  GREP: Info :: GETVAL 'VERSSPEC' 1 4 >>EvNomVers<< ;
  GREP: Info :: GETVAL 'VERSSPEC' 5 8 >>EvNomSpec<< ;
  GREP: Info :: GETVAL 'EVOLDRAG' 1   >>EvNomEvol<< ;
ENDIF ;

*--- Calculation options employed in EvoNominale.x2m
INTEGER ThermaExpans ;
STRING  LEAKMODEL    ;
STRING  TypeDil      ;

GREP: Info :: GETVAL 'ThermaExpans' 1     >>ThermaExpans<< ;
GREP: Info :: GETVAL 'LEAKMODEL'    1 4   >>LEAKMODEL<<    ;
GREP: Info :: GETVAL 'TypeDil'      1 4   >>TypeDil<<      ;

*=======================================================
* OPTION-DEFINED PARAMETERS
*-------------------------------------------------------
* These parameters are parsed from the calculation options
* previously defined
*-------------------------------------------------------

*--- Modele de fuites
STRING LEAKTYPE LEAKEQUATION CTRA ;
IF LEAKMODEL "APOL" = THEN
  EVALUATE LEAKTYPE LEAKEQUATION CTRA := "B" "B1"   "APOL" ;
ELSEIF LEAKMODEL "CASM" = THEN
  EVALUATE LEAKTYPE LEAKEQUATION CTRA := "K" "P0TR" "OLDW" ;
ELSEIF LEAKMODEL "NLKG" = THEN
  EVALUATE LEAKTYPE LEAKEQUATION CTRA := "K" "B1" "APOL" ;
ENDIF ;
*--- Genre de bibliotheque (DRAGON)
STRING  LibGenre ;
EVALUATE LibGenre := 'DRAGON' ;

*--- Thermal expansion for multi-parameter library
STRING  ThermaExp_S := ThermaExpans I_TO_S ;

*=======================================================
* SUMMARY CALCULATION
*-------------------------------------------------------
ECHO "$$$ Case of Study $$$" ;
ECHO "  - Gestion      : " Gestion      ;
ECHO "  - AssType      : " AssType      ;
ECHO "  - Teneur       : " Teneur       ;
ECHO "  - InfoGado     : " InfoGado     ;
ECHO "  - ConfigPyrex  : " ConfigPyrex  ;
ECHO "  - NuclData     : " NuclData     ;
ECHO "$$$ Summary Calculation Options $$$" ;
ECHO "  - SPH          : " SPH          ;
ECHO "  - HF           : " HF           ;
ECHO "  - OptDet35     : " OptDet35     ;
ECHO "  - TypeMatrix   : " TypeMatrix   ;
ECHO "  - OptMatrixHis : " OptMatrixHis ;
ECHO "  - ListIsoPart  : " ListIsoPart  ;
ECHO "  - BiblXS       : " BiblXS       ;
ECHO "  - NumHistCal   : " NumHistCal   ;
ECHO "  - LEAKMODEL    : " LEAKMODEL    ;
ECHO "  - TypeDil      : " TypeDil      ;
ECHO "  - ThermaExpans : " ThermaExpans ;
ECHO "  - Norm_MWT     : " Norm_MWT     ;
ECHO "  - EvNomVers    : " EvNomVers    ;
ECHO "  - EvNomSpec    : " EvNomSpec    ;
ECHO "  - EvNomEvol    : " EvNomEvol    ;
ECHO "$$$" ;

*-------------------------------------------------
* Variables
*-------------------------------------------------
*--- divers
REAL    xtr ; ! TCOM      Mil. Combustible
INTEGER iter := 0 ;
INTEGER maxiter ;
INTEGER iComb ; ! 1er combustible (COMB1.1) pour temperature SAPHYB
INTEGER bstep ; ! Burnup Step dans L_BURNUP
INTEGER    i    j    k    l    m := 1 1 1 1 1 ;
INTEGER   di   dj   dk   dl   dm ;
REAL    alpha beta kinf ;

REAL    h2o_10 h2o_11 h2o_12 h2o_13 h2o_14 ;
REAL    h_10   h_11   h_12   h_13   h_14   ;
REAL    o_10   o_11   o_12   o_13   o_14   ;
REAL    b10_10 b10_11 b10_12 b10_13 b10_14 ;
REAL    b11_10 b11_11 b11_12 b11_13 b11_14 ;
STRING  SaveDir ; ! Nom du DIR dans objet EDI (avec '_2G')
STRING  EvNomComm MkBibComm ; ! Commentaires (COMM) de la Bibl
STRING  Noml ; ! 'Nom' de la Bib (NOML)

*--- nominal
REAL    tmod_nom_K tclad_nom_K tcom_nom_K ;
REAL    dmod_nom cbor_nom barr_nom tcom_nom tmod_nom tclad_nom ;
!NB: tclad_nom & tmod_nom are not real depletion parameters
!They are completely determined by the true depletion parameters
!tmod_nom imposed by pressure (isobar cond at 155 bar) and dmod_nom
!tclad_nom imposed by tmod_nom and tcom_nom

*--- Branches
REAL    burn ;
INTEGER BarType ;
REAL    tmod_K tclad_K tcom_K ;
REAL    cbor tcom dmod barr tmod tclad ;
!NB: tclad & tmod are not real depletion parameters
!They are completely determined by the true depletion parameters
!tmod imposed by pressure (isobar cond at 155 bar) and dmod
!tclad imposed by tmod and tcom


*-------------------------------------------------
* Attribution des Chaines
*-------------------------------------------------

*--- SaveDir -> EDI:
* Name of the directory EDINAM where the information of EDI:
* is stored.
*---
EVALUATE SaveDir := AssType Teneur + "_2G" + ;

*--- Noml -> Nom de la SAPHYB/MULTICOMPO
* The basename is defined as :
* Sap/Mco_[Gestion]_[AssType][Teneur]_{[InfoGado]|[ConfigPyrex]}
*---
IF BiblXS "SAPHYB" = THEN
  EVALUATE Noml := "Sap_" Gestion + "_" + AssType + Teneur + ;
ELSEIF BiblXS "MULTICOMPO" = THEN
  EVALUATE Noml := "Mco_" Gestion + "_" + AssType + Teneur + ;
ELSE
  ECHO "BiblXS:" BiblXS "non disponible" ;
  ECHO "Veuillez utiliser SAPHYB ou MULTICOMPO" ;
  ABORT: ;
ENDIF ;
IF AssType "UGd" = AssType "UGd8" = + THEN
  EVALUATE Noml := Noml "_" + InfoGado + ;
ENDIF ;
IF ConfigPyrex "None" = NOT THEN
  EVALUATE Noml := Noml "_" + ConfigPyrex + ;
ENDIF ;

*--- Version figee (du type v{4|5}.X.Y)
IF Fixed "YES" = THEN
*--- EvNomComm -> Commentaire Bibl (info evo nominale)
  EVALUATE EvNomComm := EvNomVers "." + EvNomEvol I_TO_S + "." +
                        EvNomSpec + ;
*--- MkSapComm -> Commentaire Bibl (info MakeSap1BU)
  EVALUATE MkBibComm := MkBibVers "." + MkBibEvol I_TO_S + "." +
                        MkBibSpec + ;
*--- Version evol (du type v{4|5{a|b}}evXXX[_SPEC])
ELSEIF Fixed "NO" = THEN
*--- EvNomComm -> Commentaire Bibl (info evo nominale)
  EVALUATE EvNomComm := EvNomVers "ev" + EvNomEvol I_TO_S + ;
  IF EvNomSpec "NONE" <> THEN
    EVALUATE EvNomComm := EvNomComm "_" + EvNomSpec + ;
  ENDIF ;
*--- MkBibComm -> Commentaire Bibl (info MakeSap1BU)
  EVALUATE MkBibComm := MkBibVers "ev" + MkBibEvol I_TO_S + ;
  IF MkBibSpec "NONE" <> THEN
    EVALUATE MkBibComm := MkBibComm "_" + MkBibSpec + ;
  ENDIF ;
ELSE
  ECHO "ERROR --- Fixed:" Fixed "not recognized." ;
  ABORT: ;
ENDIF ;
*-------------------------------------------------
* CreaStepList : Tables de parametres
*-------------------------------------------------
StepList := CreaStepList ::
  <<Gestion>> <<AssType>> <<ConfigPyrex>> <<NumHistCal>> <<TypeMatrix>> ;

*-------------------------------------------------
* Variables liees aux tables de parametres
* Ajustement en fonction des paliers
*-------------------------------------------------
GREP: StepList :: GETVAL 'DeplParam' 1 5
  >>dmod_nom<< >>cbor_nom<< >>barr_nom<<
  >>tcom_nom<< >>tmod_nom<< ;

ECHO "#NOM" dmod_nom cbor_nom barr_nom tcom_nom ;

*--- Nb. Branches
GREP: StepList :: LENGTH 'Burnup'   >>di<< ;
GREP: StepList :: LENGTH 'TempComb' >>dk<< ;
GREP: StepList :: LENGTH 'DensModo' >>dl<< ;
GREP: StepList :: LENGTH 'ConcBore' >>dj<< ;
GREP: StepList :: LENGTH 'Rods'     >>dm<< ;

EVALUATE maxiter := dk dl * dj * dm * ;

EVALUATE tclad_nom    := 0.12 tcom_nom *
                         0.88 tmod_nom * + ;
EVALUATE tcom_nom_K   := tcom_nom 273.15 + ;
EVALUATE tmod_nom_K   := tmod_nom 273.15 + ;
EVALUATE tclad_nom_K  := tclad_nom 273.15 + ;

*-------------------------------------------------
* Indice de temperature en fonction du type d'assemblage
*-------------------------------------------------
IF AssType "UOX" = AssType "UGd" = AssType "UGd8" = + + THEN
  EVALUATE iComb := 100 ;
ELSEIF AssType "MOX" = THEN
  EVALUATE iComb := 110 ;
ELSE
  ECHO "ERROR --- AssType:" AssType "not recognized." ;
  ABORT: ;
ENDIF ;
*-------------------------------------------------
* Get Value of BURN
*-------------------------------------------------
INTEGER bu_index := #REPL ; ! A REMPLACER PAR UN INTEGER !
GREP: StepList :: GETVAL 'Burnup' <<bu_index>> >>burn<<  ;
GREP: StepList :: GETVAL 'BurnStep' <<bu_index>> >>bstep<< ;
*-------------------------------------------------
* Main Loop 1: BARR
*-------------------------------------------------
WHILE m dm <= DO
  GREP: StepList :: GETVAL 'Rods' <<m>> >>barr<< ;

  EVALUATE BarType := barr R_TO_I ;
  !-------------------------------------------------
  ! Geo17x17 et Geo15x15 : Geometrie
  !-------------------------------------------------
  IF Gestion "TIH" = THEN
     Assmb
     AssmbAu
     Discr
     DiscrAu := Geo15x15 ::
      <<Gestion>> <<AssType>> <<ConfigPyrex>> <<ThermaExpans>>
      <<BarType>> <<tcom_nom>> <<tmod_nom>> ;
  ELSE
    Assmb
    AssmbAu
    Discr
    DiscrAu := Geo17x17 ::
      <<Gestion>> <<AssType>> <<ConfigPyrex>> <<ThermaExpans>>
      <<BarType>> <<tcom_nom>> <<tmod_nom>> ;
  ENDIF ;
  GeoAssTriv GeoAssHom GeoCPCPlie GeoCPCDeplie := CreaGeoHom
  :: <<Gestion>> <<tmod_nom>> ;

  WHILE j dj <= DO
    GREP: StepList :: GETVAL 'ConcBore' <<j>> >>cbor<< ;

    WHILE k dk <= DO
      GREP: StepList :: GETVAL 'TempComb' <<k>> >>tcom<< ;
      EVALUATE tcom_K := tcom 273.15 + ;

      WHILE l dl <= DO
        EVALUATE iter := iter 1 + ;
        ECHO "$$$ iter : " iter "" maxiter ;

        GREP: StepList :: GETVAL 'DensModo' <<l>> >>dmod<< ;

        !EVALUATE tmod := tmod_K 273.15 - ;
        EVALUATE tclad := 0.88 tmod_nom * 0.12 tcom * + ;
        EVALUATE tclad_K := tclad 273.15 + ;
        !ECHO "@@@@@@@@@@@@@@ TEMPERATURES BRANCHING @@@@@@@@@@@@@@" ;
        !ECHO "tmod  : " tmod  ;
        !ECHO "tclad : " tclad ;
        !ECHO "tcom  : " tcom  ;
        !ECHO "tmod_K  : " tmod_K  ;
        !ECHO "tclad_K : " tclad_K ;
        !ECHO "tcom_K  : " tcom_K  ;
        !!<<<<

        ECHO "# iter" iter "BURN" burn "DMOD" dmod ;
        ECHO "# TCOM" tcom_K "CBOR" cbor "BARR" barr ;

        Library := ImpLibrary ;

*------------------------------------------------------
* Recover Nominal Concentrations from ConcMode (see .access)
*------------------------------------------------------
        GREP: ConcMode :: GETVAL 'MODE  ' 1 4
                        >>h_10<< >>o_10<< >>b10_10<< >>b11_10<< ;
        GREP: ConcMode :: GETVAL 'MODEL ' 1 4
                        >>h_11<< >>o_11<< >>b10_11<< >>b11_11<< ;
        GREP: ConcMode :: GETVAL 'MODEC ' 1 4
                        >>h_12<< >>o_12<< >>b10_12<< >>b11_12<< ;
        GREP: ConcMode :: GETVAL 'MODETI' 1 4
                        >>h_13<< >>o_13<< >>b10_13<< >>b11_13<< ;
        GREP: ConcMode :: GETVAL 'MODETE' 1 4
                        >>h_14<< >>o_14<< >>b10_14<< >>b11_14<< ;
*------------------------------------------------------
* Modif LIB en fonction des parametres CBOR DMOD
* alpha: dmod / dmod_nom  [dmod_nom = .716403 g.cm^-3]
* beta:  cbor / cbor_nom  [cbor_nom = 600. ppm]
* => NewH2O =  alpha         x OldH20
* => NewB10 = (alpha x beta) x OldB10
* => NewB11 = (alpha x beta) x OldB11
*------------------------------------------------------
        EVALUATE alpha := dmod dmod_nom / ;
        EVALUATE beta  := cbor cbor_nom / ;

        EVALUATE h2o_10 := h2o_10 alpha * ;
        EVALUATE h_10   := h_10 alpha * ;
        EVALUATE o_10   := o_10 alpha * ;
        EVALUATE b10_10 := b10_10 alpha * beta * ;
        EVALUATE b11_10 := b11_10 alpha * beta * ;

        EVALUATE h2o_11 := h2o_11 alpha * ;
        EVALUATE h_11   := h_11 alpha * ;
        EVALUATE o_11   := o_11 alpha * ;
        EVALUATE b10_11 := b10_11 alpha * beta * ;
        EVALUATE b11_11 := b11_11 alpha * beta * ;

        EVALUATE h2o_12 := h2o_12 alpha * ;
        EVALUATE h_12   := h_12 alpha * ;
        EVALUATE o_12   := o_12 alpha * ;
        EVALUATE b10_12 := b10_12 alpha * beta * ;
        EVALUATE b11_12 := b11_12 alpha * beta * ;

        EVALUATE h2o_13 := h2o_13 alpha * ;
        EVALUATE h_13   := h_13 alpha * ;
        EVALUATE o_13   := o_13 alpha * ;
        EVALUATE b10_13 := b10_13 alpha * beta * ;
        EVALUATE b11_13 := b11_13 alpha * beta * ;

        EVALUATE h2o_14 := h2o_14 alpha * ;
        EVALUATE h_14   := h_14 alpha * ;
        EVALUATE o_14   := o_14 alpha * ;
        EVALUATE b10_14 := b10_14 alpha * beta * ;
        EVALUATE b11_14 := b11_14 alpha * beta * ;
*------------------------------------------------------
* Numeros de mix:
*------------------------------------------------------
* Moderateurs:            1 ->    9
* Structures:   Tubes    10 ->   19
*               Barres   20 ->   29
*               Gaines   30 ->   39
* Combustibles: UOX     100 ->  109
*               MOX     110 ->  139
*               UGd     140 -> Nmix
*------------------------------------------------------
* Moderateurs
*   10 - MODE   [moderateur cellule centrale]
*   11 - MODEL  [moderateur cellule en peripherie (avec lame d'eau)]
*   12 - MODEC  [moderateur cellule en coin (double lame d'eau)]
*   13 - MODETI [moderateur cellule tube (interieur du tube)+Isotopes de barres AIC a 0]
*   14 - MODETE [moderateur cellule tube (exterieur du tube)]
* Structures: Tubes
*   20 - TUBE
* Structures: Barres
*   21 - AIC    [Barres AIC]
*   22 - ACIER  [Barres acier]
*   23 - B4C    [Barres B4C]
* Structures: Gaines
*   30 - GAINC  [Gaine combustible UOX/MOX/UGd]
*   32 - GAINS  [Gaine Barres ACIER]
*   33 - GAINB  [Gaine Barres B4C]
*   34 - GAINE BP INT ACIER SS304
*   35 - GAINE BP EXT ACIER SS304
*   36 - GAINC M5 [Gaine combustible]
*   37 - GAINA  [Gaine Barres AICn]
*   38 - GAINA  [Gaine Barres AICg]
* Poison consommable (Pyrex)
*   65 - PYREX
* Combustibles UOX
*  100 - COMB   [UOX 1ere couronne (centre a Rcomb*0.5^1/2) <=> 0 a r1]
*  101 - COMB   [UOX 2e couronne]
*  102 - COMB   [UOX 3e couronne]
*  103 - COMB   [UOX 4e couronne (r3 a Rcomb)]
* Combustibles MOX
*  110 - COMB1  [MOX 'faible' 1ere couronne]
*  111 - COMB1  [MOX 'faible' 2e couronne]
*  112 - COMB1  [MOX 'faible' 3e couronne]
*  113 - COMB1  [MOX 'faible' 4e couronne]
*  120 - COMB2  [MOX 'moyen' 1ere couronne]
*  121 - COMB2  [MOX 'moyen' 2e couronne]
*  122 - COMB2  [MOX 'moyen' 3e couronne]
*  123 - COMB2  [MOX 'moyen' 4e couronne]
*  130 - COMB3  [MOX 'fort' 1ere couronne]
*  131 - COMB3  [MOX 'fort' 2e couronne]
*  132 - COMB3  [MOX 'fort' 3e couronne]
*  133 - COMB3  [MOX 'fort' 4e couronne]
* Combustibles UGd
*  140 - COMB   [UOX+Gd 1ere couronne (centre a Rcomb*0.2^1/2)]
*  141 - COMB   [UOX+Gd 2e couronne]
*  142 - COMB   [UOX+Gd 3e couronne]
*  143 - COMB   [UOX+Gd 4e couronne]
*  144 - COMB   [UOX+Gd 5e couronne]
* Nmix - COMB   [UOX+Gd 6e couronne] --- Nmix = 145
*------------------------------------------------------
* Creation de la microlib Library
* mixes communs a tous les assemblages
*------------------------------------------------------
        Library := LIB: Library :: EDIT 0
! Attention: correction de transport a rajouter a chaque appel au module LIB:
          CTRA <<CTRA>> MIXS LIB: <<LibGenre>> FIL: <<NuclData>>
! ATTENTION : supprimer H2O ou H1_H2O et O16 selon la bibli utilisee
          MIX   10 <<tmod_nom_K>> NOEV (* MODE *)
            H2O <<h2o_10>>
            H1_H2O <<h_10>>
            O16    <<o_10>>
            B10  <<b10_10>>
            B11  <<b11_10>>
          MIX   11 <<tmod_nom_K>> NOEV (* MODEL *)
            H2O <<h2o_11>>
            H1_H2O <<h_11>>
            O16    <<o_11>>
            B10  <<b10_11>>
            B11  <<b11_11>>
          MIX   12 <<tmod_nom_K>> NOEV (* MODEC *)
            H2O <<h2o_12>>
            H1_H2O <<h_12>>
            O16    <<o_12>>
            B10  <<b10_12>>
            B11  <<b11_12>>
          MIX   13 <<tmod_nom_K>> NOEV (* MODETI *)
            H2O <<h2o_13>>
            H1_H2O <<h_13>>
            O16    <<o_13>>
            B10  <<b10_13>>
            B11  <<b11_13>>
          MIX   14 <<tmod_nom_K>> NOEV (* MODETE *)
            H2O <<h2o_14>>
            H1_H2O <<h_14>>
            O16    <<o_14>>
            B10  <<b10_14>>
            B11  <<b11_14>>
          MIX  20 <<tmod_nom_K>> NOEV (* TUBE *)
          MIX  21 <<tmod_nom_K>> NOEV (* AIC *)
          MIX  41 <<tmod_nom_K>> NOEV (* AIC *)
          MIX  42 <<tmod_nom_K>> NOEV (* AIC *)
          MIX  43 <<tmod_nom_K>> NOEV (* AIC *)
          MIX  22 <<tmod_nom_K>> NOEV (* ABS_ACIER *)
          MIX  50 <<tmod_nom_K>> NOEV (* ABS_ACIER *)
          MIX  51 <<tmod_nom_K>> NOEV (* ABS_ACIER *)
          MIX  52 <<tmod_nom_K>> NOEV (* ABS_ACIER *)
          MIX  30 <<tclad_K>> NOEV (* GAINE *)
          MIX  32 <<tmod_nom_K>> NOEV (* GAINE ABS_ACIER *)
          MIX  37 <<tmod_nom_K>> NOEV (* GAINE AICn *)
          MIX  38 <<tmod_nom_K>> NOEV (* GAINE AICg *)
          ;
*------------------------------------------------------
* Set Library at burnup
* mixes communs a tous les assemblages
*------------------------------------------------------
        Library := LIB: Library ImpBurnup :: EDIT 0
          BURN <<bstep>>
          MIX 20 (* TUBE *)
          MIX 21 (* AIC *)
          MIX 41
          MIX 42
          MIX 43
          MIX 22 (* ABS_ACIER *)
          MIX 50
          MIX 51
          MIX 52
          MIX 30 (* GAINE *)
          MIX 32 (* GAINE ABS_ACIER *)
          MIX 37 (* GAINE AICn *)
          MIX 38 (* GAINE AICg *)
          ;
        IF ConfigPyrex "None" = NOT THEN
          Library := LIB: Library :: EDIT 0
            CTRA <<CTRA>> MIXS LIB: <<LibGenre>> FIL: <<NuclData>>
            MIX 34 <<tmod_nom_K>>
            MIX 35 <<tmod_nom_K>>
            MIX 36 <<tmod_nom_K>>
            MIX 65 <<tmod_nom_K>> ;
          Library := LIB: Library ImpBurnup :: EDIT 0
            BURN <<bstep>>
            MIX 34
            MIX 35
            MIX 36
            MIX 65
            ;
        ENDIF ;
*------------------------------------------------------
        IF AssType "UOX" = THEN
*------------------------------------------------------
          Library := LIB: Library :: EDIT 0
            CTRA <<CTRA>> MIXS LIB: <<LibGenre>> FIL: <<NuclData>>
            MIX 100 <<tcom_K>> (* COMB.1 *)
            MIX 101 <<tcom_K>> (* COMB.2 *)
            MIX 102 <<tcom_K>> (* COMB.3 *)
            MIX 103 <<tcom_K>> (* COMB.4 *)
            ;
*------------------------------------------------------
* Set Libraries at burnup
*------------------------------------------------------
          Library := LIB: Library ImpBurnup :: EDIT 0
            BURN <<bstep>>
            MIX 100 (* COMB.1 *)
            MIX 101 (* COMB.2 *)
            MIX 102 (* COMB.3 *)
            MIX 103 (* COMB.4 *)
            ;
*------------------------------------------------------
        ELSEIF AssType "MOX" = THEN
*------------------------------------------------------
          Library := LIB: Library :: EDIT 0
            CTRA <<CTRA>> MIXS LIB: <<LibGenre>> FIL: <<NuclData>>
            MIX 110 <<tcom_K>> (* COMB1.1 [LOW PU] *)
            MIX 111 <<tcom_K>> (* COMB1.2 *)
            MIX 112 <<tcom_K>> (* COMB1.3 *)
            MIX 113 <<tcom_K>> (* COMB1.4 *)
            MIX 120 <<tcom_K>> (* COMB2.1 [AVG PU] *)
            MIX 121 <<tcom_K>> (* COMB2.2 *)
            MIX 122 <<tcom_K>> (* COMB2.3 *)
            MIX 123 <<tcom_K>> (* COMB2.4 *)
            MIX 130 <<tcom_K>> (* COMB3.1 [HIGH PU] *)
            MIX 131 <<tcom_K>> (* COMB3.2 *)
            MIX 132 <<tcom_K>> (* COMB3.3 *)
            MIX 133 <<tcom_K>> (* COMB3.4 *)
            ;
*------------------------------------------------------
* Set Libraries at burnup
*------------------------------------------------------
          Library := LIB: Library ImpBurnup :: EDIT 0
            BURN <<bstep>>
            MIX 110 (* COMB1.1 [LOW PU] *)
            MIX 111 (* COMB1.2 *)
            MIX 112 (* COMB1.3 *)
            MIX 113 (* COMB1.4 *)
            MIX 120 (* COMB2.1 [AVG PU] *)
            MIX 121 (* COMB2.2 *)
            MIX 122 (* COMB2.3 *)
            MIX 123 (* COMB2.4 *)
            MIX 130 (* COMB3.1 [HIGH PU] *)
            MIX 131 (* COMB3.2 *)
            MIX 132 (* COMB3.3 *)
            MIX 133 (* COMB3.4 *)
            ;
*------------------------------------------------------
        ELSEIF AssType "UGd" = AssType "UGd8" = + THEN
*------------------------------------------------------
          Library := LIB: Library :: EDIT 0
            CTRA <<CTRA>> MIXS LIB: <<LibGenre>> FIL: <<NuclData>>
            MIX 100 <<tcom_K>> (* COMB1.1 [UOX std] *)
            MIX 101 <<tcom_K>> (* COMB1.2 *)
            MIX 102 <<tcom_K>> (* COMB1.3 *)
            MIX 103 <<tcom_K>> (* COMB1.4 *)
            MIX 140 <<tcom_K>> (* COMB2.1 [UOX+Gd] *)
            MIX 141 <<tcom_K>> (* COMB2.2 *)
            MIX 142 <<tcom_K>> (* COMB2.3 *)
            MIX 143 <<tcom_K>> (* COMB2.4 *)
            MIX 144 <<tcom_K>> (* COMB2.5 *)
            MIX 145 <<tcom_K>> (* COMB2.6 *)
            ;
*------------------------------------------------------
* Set Libraries at burnup
*------------------------------------------------------
          Library := LIB: Library ImpBurnup :: EDIT 0
            BURN <<bstep>>
            MIX 100 (* COMB1.1 [UOX std] *)
            MIX 101 (* COMB1.2 *)
            MIX 102 (* COMB1.3 *)
            MIX 103 (* COMB1.4 *)
            MIX 140 (* COMB2.1 [UOX+Gd] *)
            MIX 141 (* COMB2.2 *)
            MIX 142 (* COMB2.3 *)
            MIX 143 (* COMB2.4 *)
            MIX 144 (* COMB2.5 *)
            MIX 145 (* COMB2.6 *)
            ;
        ENDIF ;
*------------------------------------------------------
* Self Shielding + Calcul de flux
* Branchement selon assemblage et barres (a cause des # de MIX contenus dans Discr)
*------------------------------------------------------
*        Autoprotection alternative : sans CALC REGI
*        LibraryAu := USS: Library DiscrAu ::
*          EDIT 0 PASS 2 MAXST 200 GRMIN 28 GRMAX 150 ;
*------------------------------------------------------
        LibraryAu := Autop Library DiscrAu ::
          <<False>> <<NuclData>> <<LibType>> <<AssType>> <<BarType>> ;

*------------------------------------------------------
* Calcul des Pij et Calcul de flux
*------------------------------------------------------
        ECHO "#PARA DM=" dmod "CB=" cbor "BA=" BarType "TC=" tcom ;

        CP := ASM: LibraryAu Discr :: EDIT 0 ARM ;
        Calc := FLU: CP LibraryAu Discr :: EDIT 0
          TYPE <<LEAKTYPE>> <<LEAKEQUATION>> SIGS ;
        GREP: Calc :: GETVAL 'K-INFINITY' 1 >>kinf<< ;

        ECHO "#KINF ITER=" iter " K-INF=" kinf ;

        IF iter 10 < THEN
          ECHO "#iter:   " iter "kinf:" kinf ;
        ELSEIF iter 100 < THEN
          ECHO "#iter:  " iter "kinf:" kinf ;
        ELSEIF iter 1000 < THEN
          ECHO "#iter: " iter "kinf:" kinf ;
        ELSE
          ECHO "#iter:" iter "kinf:" kinf ;
        ENDIF ;
*------------------------------------------------------
* No Rod : No SPH (BarType = 1)
*------------------------------------------------------
        IF BarType 1 = SPH "GrappeSlmt" = * THEN
          IF BiblXS "SAPHYB" = THEN
!           Noms des isotopes a particulariser et des isotopes fissiles produisant des PF
!           differents selon la bibliotheque utilisee -> liste definie dans le .access
            Out := EDI: LibraryAu Calc Discr :: EDIT 0
              MICR #printEdiIsot
              MERG COMP
              COND 0.625
              SAVE ON <<SaveDir>> ;

!           Recompute Micro-XS of U-235 for detector calculation
            IF OptDet35 "IRIT" = THEN
              Out := ModDet35 Out LibraryAu Calc Discr CP ::
                <<AssType>> <<SaveDir>> <<OptDet35>> ;
            ENDIF ;

          ELSEIF BiblXS "MULTICOMPO" = THEN
            Out := EDI: LibraryAu Calc Discr Assmb GeoAssHom ::
              EDIT 0
              MICR #printEdiIsot
              MERG COMP
              COND 0.625
              MGEO GeoAssHom
              SAVE ON <<SaveDir>> ;

!           Recompute Micro-XS of U-235 for detector calculation
            IF OptDet35 "IRIT" = THEN
              Out := ModDet35 Out LibraryAu Calc Discr CP ::
                <<AssType>> <<SaveDir>> <<OptDet35>> ;
            ENDIF ;

!           Interpolation des flux dans l'assemblage
            TrackAss := TRIVAT: GeoAssTriv      :: DUAL 3 3 EDIT 0 ;

            OutCPC := EDI: LibraryAu Calc Discr Assmb ::
              EDIT 2
              MERG CELL UNFOLD
              COND 0.625
              SAVE ON <<SaveDir>> ;

          ELSE
              ECHO "BiblXS:" BiblXS "non disponible" ;
              ECHO "Veuillez utiliser SAPHYB ou MULTICOMPO" ;
              ABORT: ;
          ENDIF ;
*------------------------------------------------------
* SPH branching for AICN & AICG (BarType != 1)
*------------------------------------------------------
        ELSE
          IF BiblXS "SAPHYB" = THEN
            Out := EDI: LibraryAu Calc Discr CP :: EDIT 0
              MICR #printEdiIsot
              MERG COMP
              COND 0.625
              JOUT
              SAVE ON <<SaveDir>> ;

!           Recompute Micro-XS of U-235 for detector calculation
            IF OptDet35 "IRIT" = THEN
              Out := ModDet35 Out LibraryAu Calc Discr CP ::
                <<AssType>> <<SaveDir>> <<OptDet35>> ;
            ENDIF ;

            Out := SPH: Out :: EDIT 0 ALBS SELE_ALB PN ;

          ELSEIF BiblXS "MULTICOMPO" = THEN
            Out := EDI: LibraryAu Calc Discr CP Assmb GeoAssHom ::
              EDIT 0
              MICR #printEdiIsot
              MERG COMP
              COND 0.625
              JOUT
              MGEO GeoAssHom
              SAVE ON <<SaveDir>> ;

!           Recompute Micro-XS of U-235 for detector calculation
            IF OptDet35 "IRIT" = THEN
              Out := ModDet35 Out LibraryAu Calc Discr CP ::
                <<AssType>> <<SaveDir>> <<OptDet35>> ;
            ENDIF ;

           TrackAss := TRIVAT: GeoAssTriv      :: DUAL 3 3 EDIT 0 ;
           Out   :=    SPH: Out TrackAss :: EDIT 0 SELE_ALB PN ;

           OutCPC := EDI: LibraryAu Calc Discr CP Assmb ::
             EDIT 0
             MERG CELL UNFOLD
             COND 0.625
             JOUT
             SAVE ON <<SaveDir>> ;

          ELSE
              ECHO "BiblXS:" BiblXS "non disponible" ;
              ECHO "Veuillez utiliser SAPHYB ou MULTICOMPO" ;
              ABORT: ;
          ENDIF ;
        ENDIF ;

        EVALUATE xtr := burn Norm_MWT / ;
        ECHO "# Bib creation iteration" iter ;
        ECHO "# burn" burn "xtr" xtr ;
*------------------------------------------------------
* Initialisation de la Bibl
*------------------------------------------------------
        IF BiblXS "SAPHYB" = THEN
          IF OptMatrixHis NOT THEN
            IF iter 1 = THEN
            *---- Initialize Saphyb
            SaphybStep := SAP: LibraryAu :: EDIT 0
              COMM 'EvNom' <<EvNomComm>> 'MkBib' <<MkBibComm>> ENDC
              COMM 'Therm' <<ThermaExp_S>> 'TypeD' <<TypeDil>> ENDC
              NOML <<Noml>>
              PARA 'Concentration_Bore' 'CBOR' VALE FLOT
              PARA 'Temp_Combustible'   'TCOM' TEMP LibraryAu <<iComb>>
              PARA 'Densite_Moderateur' 'DMOD' VALE FLOT
              PARA 'Barres_Controle'    'BARR' VALE FLOT
              PARA 'Burnup'             'BURN' IRRA
!--- pb avec 'FLUB' dans LISAPH: seulement 'FLUE' est accepte ---
!               PARA 'Fluence'            'FLUE' FLUE
!--- mais le module SAP: de DRAGON n'accepte que FLUB/FLUG ------
              PARA 'Fluence'            'FLUE' FLUB
!----------------------------------------------------------------
              LOCA 'Equivalence'        'EQVS' EQUI
              LOCA 'Equivalence_OP'     'EQVO' EQUI
              LOCA 'Equivalence_Vierge' 'EQVI' EQUI
              LOCA 'Dens_noyaux_lourds' 'MASL' MASL
              ISOT #printSapIsot
              MACR 'MACR' REST
              REAC  TOTA ABSO SNNN FISS CHI NUFI ENER FUIT DIFF SELF
                    PROF TRAN EGAM EFIS
              ;
            ENDIF ;
            *------------------------------------------------------
            * Enrichissement de la Saphyb
            *------------------------------------------------------
            SaphybStep := SAP: SaphybStep ImpBurnup LibraryAu Out :: EDIT 0
              CRON CBOR <<cbor>> DMOD <<dmod>> BARR <<barr>>
              SET <<xtr>> DAY ;


          ELSE

            IF iter 1 = THEN
            *------------------------------------------------------
            * Initialize Saphyb
            *------------------------------------------------------
            SaphybStep := SAP: LibraryAu :: EDIT 0
              COMM 'EvNom' <<EvNomComm>> 'MkBib' <<MkBibComm>> ENDC
              COMM 'Therm' <<ThermaExp_S>> 'TypeD' <<TypeDil>> ENDC
              NOML <<Noml>>
              PARA 'Concentration_Bore' 'CBOR' VALE FLOT
              PARA 'Conc_Bore_Hist'     'CBOH' VALE FLOT
              PARA 'Temp_Combustible'   'TCOM' TEMP LibraryAu <<iComb>>
              PARA 'Temp_Comb_Hist'     'TCOH' VALE FLOT
              PARA 'Densite_Moderateur' 'DMOD' VALE FLOT
              PARA 'Densite_Mode_Hist'  'DMOH' VALE FLOT
              PARA 'Barres_Controle'    'BARR' VALE FLOT
              PARA 'Barres_Contr_Hist'  'BARH' VALE FLOT
              PARA 'Burnup'             'BURN' IRRA
!--- pb avec 'FLUB' dans LISAPH: seulement 'FLUE' est accepte ---
!               PARA 'Fluence'            'FLUE' FLUE
!--- mais le module SAP: de DRAGON n'accepte que FLUB/FLUG ------
              PARA 'Fluence'            'FLUE' FLUB
!----------------------------------------------------------------
              LOCA 'Equivalence'        'EQVS' EQUI
              LOCA 'Equivalence_OP'     'EQVO' EQUI
              LOCA 'Equivalence_Vierge' 'EQVI' EQUI
              LOCA 'Dens_noyaux_lourds' 'MASL' MASL
              ISOT #printSapIsot
              MACR 'MACR' REST
              REAC  TOTA ABSO SNNN FISS CHI NUFI ENER FUIT DIFF SELF
                    PROF TRAN EGAM EFIS
              ;
            ENDIF ;
            *------------------------------------------------------
            * Enrichissement de la Saphyb
            *------------------------------------------------------
            SaphybStep := SAP: SaphybStep ImpBurnup LibraryAu Out :: EDIT 0
              CRON CBOR <<cbor>> DMOD <<dmod>> BARR <<barr>>
              CBOH <<cbor_nom>> DMOH <<dmod_nom>> BARH <<barr_nom>>
              TCOH <<tcom_nom>>
              SET <<xtr>> DAY ;

          ENDIF ;

*-*-*-*-*-*-*-*-*-*-*-*-*-**-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
        ELSEIF BiblXS "MULTICOMPO" = THEN
          IF OptMatrixHis NOT THEN
            IF iter 1 = THEN
            *------------------------------------------------------
            * Initialize Multicompo
            *------------------------------------------------------
            CompoStep := COMPO: LibraryAu :: EDIT 0
              STEP UP "Ass"                         ! Type d'homogénéisation
              COMM 'Evolution Burnup Assembly' ENDC
              COMM 'Therm' <<ThermaExp_S>> 'TypeD' <<TypeDil>> ENDC
              COMM <<Noml>> ENDC
              PARA 'CBOR' VALU REAL                 ! Concentration_Bore
              PARA 'TCOM' TEMP LibraryAu <<iComb>>  ! Temp_Combustible
              PARA 'DMOD' VALU REAL                 ! Densite_Moderateur
              PARA 'BARR' VALU REAL                 ! Barres_Controle
              PARA 'BURN' IRRA                      ! Burnup
!--- pb avec 'FLUB' dans LISAPH: seulement 'FLUE' est accepte ---
!              PARA 'Fluence'            'FLUE' FLUE
!--- mais le module SAP: de DRAGON n'accepte que FLUB/FLUG ------
              PARA 'FLUE' FLUB                      ! Fluence
!--------  --------------------------------------------------------
              LOCA 'MASL' MASL                      ! Dens_noyaux_lourds
              ISOT #printMcoIsot
              GFF                                   ! Generalized form factor info
              INIT
              ;
            ENDIF ;
            *------------------------------------------------------
            * Enrichissement de la MultiCompo
            *------------------------------------------------------
            CompoStep := COMPO: CompoStep Out OutCPC ImpBurnup LibraryAu ::
              EDIT 0
              STEP UP "Ass"
              CBOR <<cbor>> DMOD <<dmod>> BARR <<barr>>
              SET <<xtr>> DAY ;

          ELSE
            IF iter 1 = THEN
            *------------------------------------------------------
            * Initialize Multicompo
            *------------------------------------------------------
            CompoStep := COMPO: LibraryAu :: EDIT 0
              STEP UP "Ass"                         ! Type d'homogénéisation
              COMM 'Evolution Burnup Assembly' ENDC
              COMM 'Therm' <<ThermaExp_S>> 'TypeD' <<TypeDil>> ENDC
              COMM <<Noml>> ENDC
              PARA 'CBOR' VALU REAL                 ! Concentration_Bore
              PARA 'CBOH' VALU REAL                 ! History Concentration_Bore
              PARA 'TCOM' TEMP LibraryAu <<iComb>>  ! Temp_Combustible
              PARA 'TCOH' VALU REAL                 ! History Temp_Combustible
              PARA 'DMOD' VALU REAL                 ! Densite_Moderateur
              PARA 'DMOH' VALU REAL                 ! History Densite_Moderateur
              PARA 'BARR' VALU REAL                 ! Barres_Controle
              PARA 'BARH' VALU REAL                 ! History Barres_Controle
              PARA 'BURN' IRRA                      ! Burnup
!--- pb avec 'FLUB' dans LISAPH: seulement 'FLUE' est accepte ---
!              PARA 'Fluence'            'FLUE' FLUE
!--- mais le module SAP: de DRAGON n'accepte que FLUB/FLUG ------
              PARA 'FLUE' FLUB                      ! Fluence
!--------  --------------------------------------------------------
              LOCA 'MASL' MASL                      ! Dens_noyaux_lourds
              ISOT #printMcoIsot
              GFF                                   ! Generalized form factor info
              INIT
              ;
            ENDIF ;
            *------------------------------------------------------
            * Enrichissement de la MultiCompo
            *------------------------------------------------------
            CompoStep := COMPO: CompoStep Out OutCPC ImpBurnup LibraryAu ::
              EDIT 0
              STEP UP "Ass"
              CBOR <<cbor>> DMOD <<dmod>> BARR <<barr>>
              CBOH <<cbor_nom>> DMOH <<dmod_nom>> BARH <<barr_nom>>
              TCOH <<tcom_nom>>
              SET <<xtr>> DAY ;

          ENDIF ;

        ELSE
            ECHO "BiblXS:" BiblXS "non disponible" ;
            ECHO "Veuillez utiliser SAPHYB ou MULTICOMPO" ;
            ABORT: ;
        ENDIF ;
*------------------------------------------------------
        CP Calc Out := DELETE: CP Calc Out ;
        IF BiblXS "MULTICOMPO" = THEN
          OutCPC TrackAss := DELETE: OutCPC TrackAss ;
        ENDIF ;
        Library LibraryAu := DELETE: Library LibraryAu ;
*------------------------------------------------------
        EVALUATE l := l 1 + ;
      ENDWHILE ;
      EVALUATE l := 1 ;
      EVALUATE k := k 1 + ;
    ENDWHILE ;
    EVALUATE k := 1 ;
    EVALUATE j := j 1 + ;
  ENDWHILE ;
  EVALUATE j := 1 ;
  EVALUATE m := m 1 + ;
  Assmb AssmbAu Discr DiscrAu := DELETE:
  Assmb AssmbAu Discr DiscrAu ;
  GeoAssTriv GeoAssHom GeoCPCPlie GeoCPCDeplie := DELETE:
  GeoAssTriv GeoAssHom GeoCPCPlie GeoCPCDeplie ;
ENDWHILE ;

*--------------------------------
IF BiblXS "SAPHYB" = THEN
  Bib_1BU := SaphybStep ;
ELSEIF BiblXS "MULTICOMPO" = THEN
  Bib_1BU := CompoStep ;
ELSE
  ECHO "BiblXS:" BiblXS "non disponible" ;
  ECHO "Veuillez utiliser SAPHYB ou MULTICOMPO" ;
  ABORT: ;
ENDIF ;
*--------------------------------
ECHO "Bib Gestion:" Gestion  ;
ECHO "Bib AssType:" AssType  ;
ECHO "Bib Teneur: " Teneur   ;
ECHO "Bib NuclData:" NuclData ;
IF AssType "UGd" = AssType "UGd8" = + THEN
  ECHO "Bib InfoGado:" InfoGado ;
ENDIF ;
IF ConfigPyrex "None" = NOT THEN
  ECHO "Bib ConfigPyrex:" ConfigPyrex ;
ENDIF ;
ECHO "Bib NOML:   " Noml     ;
ECHO "Bib STEP:   " bu_index ;
ECHO "Bib HIST:   " NumHistCal ;
ECHO "Bib ISOT:   " ListIsoPart ;
ECHO "EvNomComm" EvNomComm ;
ECHO "MkBibComm" MkBibComm ;
ECHO "MakeBib1BU completed" ;
END: ;
QUIT "LIST" .
