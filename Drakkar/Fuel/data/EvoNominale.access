#!/bin/bash
#==========================================================
# Name         : EvoNominale.access
# Type         : BASH script
# Use          : Recover Dragon procedures
#                Recover additional nuclear libraries
#                Modification input file .x2m and procedures .c2m
# Author       : Various
#----------------------------------------------------------
# Note
#   The positional parameter "$1" contains the path to the directory
#   where the input file .x2m is stored (by default XXX/data/. )
#----------------------------------------------------------
# Mandatory Arguments
#  > EvoName      : [STR] Fuel assembly identifier
#                         [Gestion]_[AssType]_[Teneur](-[ConfigPyrex])
#  > NuclData     : [STR] Nuclear data library
#  > mydata       : [STR] Name input file Dragon
#  > dd_version   : [STR] Version Dragon
#==========================================================
accessname=$(basename $0 | cut -d"." -f1)
if [ $# = 0 ]
   then
   echo "usage: "$accessname".access directory" 1>&2
   exit 1
fi
echo -e "\nExecute ${accessname}.access script\n"

#----------------------------------------------------------
# USER-DEFINED PARAMETERS
#----------------------------------------------------------

#--- EvoName
EvoName="#REPL"
#--- NuclData
NuclData=$(grep --color=none "STRING  NuclData" mydata | cut -d"=" -f2 | cut -d";" -f1 | tr -d " " | tr -d '"')
#--- mydata
# It is an environmental variable defined by 'dragon' script
#--- dd_version
# It is an environmental variable defined by 'dragon' script

#----------------------------------------------------------
# Copy PROCEDURES (.c2m) in RUNDIR
#----------------------------------------------------------
cp "$1"/../proc/*.c2m .

#----------------------------------------------------------
# Link additional NUCLEAR LIBRARIES
#----------------------------------------------------------
# The nuclear data libraries are linked to rundir through the script 'tdraglib.access'
# (by default is launched by the script 'dragon')

#----------------------------------------------------------
# OPTION-DEFINED PARAMETERS
#----------------------------------------------------------

#--- Extract parameters from 'dd_version'
if [ ! -z $(echo $dd_version | grep -o "\." | head -1) ] # Au moins un '.' dans le nom de la version -> version figee de type v{4|5}.X.Y
then
  Vers=$(echo $dd_version | cut -d"." -f1)
  Evol=$(echo $dd_version | cut -d"." -f2)
  Spec=$(echo $dd_version | cut -d"." -f3)
else # pas de '.' dans le nom de la version -> version en evolution de type v{4|5{a|b}}evXXXX[_SPEC]
  Vers=$(echo $dd_version | cut -d"e" -f1)
  Evol=$(echo $dd_version | cut -d"v" -f3 | cut -d"_" -f1)
  if [ ! -z $(echo $dd_version | grep -o "_" | head -1) ] # Au moins un "_" est present dans le nom de la version -> _SPEC
  then
    Spec=$(echo $dd_version | cut -d"_" -f2)
  else # pas de "_" dans le nom de la version -> pas de _SPEC (sera nomme "NONE")
    Spec="NONE"
  fi
fi

#--- Extract parameters from 'EvoName'
IFS='_-' read -ra elem <<< "$EvoName"
Gestion=${elem[0]}
AssType=${elem[1]}
if [[ "$AssType" = "UGd" ]]; then
  InfoGado="12Gd"
elif [[ "$AssType" = "UGd8"  ]]; then
  InfoGado="8Gd"
fi
Teneur_I=${elem[2]}
ConfigPyrex=${elem[${#elem[@]}-1]}
if [ "${ConfigPyrex:0:2}" != "Py" ]; then
  ConfigPyrex="None"
fi

#--- Extract parameters from 'NuclData'
LibType=$(echo $NuclData | sed "s/^D[0-9]*//g")

# Definition des isotopes a retirer selon les bibliotheques
if [ "$LibType" = "ENDFVI8" ] ; then
  #Liste d'isotopes a exclure
  isoAExclure=( "H2O" "Si28" "Si29" "Si30" "Ti46" "Ti47" "Ti48" "Ti49" "Ti50" \
                      "Zr90" "Zr91" "Zr92" "Zr93" "Zr94" "Zr95" "Zr96" \
                      "Cd106" "Cd108" "In115" "Sn112" "Sn114" "S33" "S34" "K39" "K40" \
                            "K41" "In113")
elif [ "$LibType" = "JEF22" ] ; then
  #Liste d'isotopes a exclure
  isoAExclure=( "H2O" "Si28" "Si29" "Si30" "Ti46" "Ti47" "Ti48" "Ti49" "Ti50" \
                      "Zr90" "Zr91" "Zr92" "Zr93" "Zr94" "Zr95" "Zr96" \
                      "Cd106" "Cd108" "InNat" "Sn112" "Sn114" "K39" "K40" "K41" "In113")
elif [ "$LibType" = "JEFF31" ] || [ "$LibType" = "JEFF311" ] || [ "$LibType" = "JEFF312" ] || \
     [ "$LibType" = "ENDFVII0" ] || [ "$LibType" = "ENDFVII1" ] ; then
  #Liste d'isotopes a exclure
  isoAExclure=( "H2O" "SiNat" "TiNat" "ZrNat" "InNat" "KNat" "In113")
else
  echo "La bibliotheque renseignee dans la variable NuclData du .x2m est inconnue au bataillon."
  exit 1
fi

#----------------------------------------------------------
# Modification PROCEDURES .c2m
#----------------------------------------------------------
# In-place modification of the temporary procedures copies in rundir

#--- GetMolarMass.c2m & CreaMix.c2m
# Mise en commentaire des isotopes prealablement definis
i=0
echo "Nombre d'isotopes a exclure : ${#isoAExclure[@]}"
while [ "$i" -lt "${#isoAExclure[@]}" ] ; do
  echo " - ${isoAExclure[i]}"

  # ----- Modification de GetMolarMass.c2m -----
  # Exclusion de la ligne contenant l'isotope a exclure
  sed -i '/ '"${isoAExclure[i]}"' /{s/^ /!/}' GetMolarMass.c2m

  # ----- Modification de CreaMix.c2m -----
  # Exclusion de la ligne contenant l'isotope a exclure
  sed -i '/^\s*'"${isoAExclure[i]}"' /{s/^ /!/}' CreaMix.c2m

  i=$(($i+1))
done

#----------------------------------------------------------
# Modification INPUT .x2m
#----------------------------------------------------------
# In-place modification of the temporary input copy in rundir

sed -i "s/#VER/$Vers/g"        mydata
sed -i "s/#EVO/$Evol/g"        mydata
sed -i "s/#SPC/$Spec/g"        mydata
sed -i "s/#GES/$Gestion/g"     mydata
sed -i "s/#ASS/$AssType/g"     mydata
sed -i "s/#ENR/$Teneur_I/g"    mydata
sed -i "s/#GAD/$InfoGado/g"    mydata
sed -i "s/#PYX/$ConfigPyrex/g" mydata
sed -i "s/#LIB/$LibType/g"     mydata

#----------------------------------------------------------
# Listing RUNDIR
#----------------------------------------------------------
echo
echo "Liste des fichiers dans le repertoire RUNDIR: "
ls -ltr *.c2m

#----------------------------------------------------------
echo -e $accessname".access script terminated\n"
