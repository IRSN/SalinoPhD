*****************************************************************
*                                                               *
* Procedure :  Steady.c2m                                       *
* Purpose   :  reactor steady state computation including       *
*              neutron physics, thermalhydraulics, local xenon  *
*              effects and critical boron search feature        *
* Author    :  V. Salino, M. Cordiez                            *
*                                                               *
* CALL      :                                                   *
*  Power Fmap Matex Thermo XeMicroF XeBurn := Steady            *
*        Fmap Matex Thermo XeMicroF XeBurn Track ::             *
*        <<CritCB>> <<CBinit>> <<Prel>> <<InletTmod>            *
*        >>CB<< >>keff<< ;                                      *
*                                                               *
* Parameters: input                                             *
*  CritCB    set to True to search critical boron concentration *
*            computation, False otherwise (logical variable).   *
*  CBinit    initialization for boron concentration (ppm) when  *
*            CritCB.EQ.True, otherwise boron concentration to   *
*            be used.                                           *
*  Prel      relative power=requested power/nominal power.      *
*  Tinlet    inlet coolant temperature (Celsius).               *
*  Ptot      reactor thermal power                              *
*  evo       set to True to reach xenon equilibrium (call to    *
*            EVO module) and False to skip this evolution (in   *
*            this case xenon does not reach equilibrium and its *
*            concentration is kept).                            *
*                                                               *
* Parameters: output                                            *
*  CB        critical boron concentration if CritCB.EQ.True,    *
*            can be negative in which case CB is extrapolated   *
*            and should not considered physical but fictive.    *
*  keff      k-effective, differs from 1 only if CB is          *
*            negative or if CritCB.EQ.False.                    *
*                                                               *
*****************************************************************
PARAMETER Power Fmap Matex Thermo XeMicroF XeBurn Track ::
  ::: LINKED_LIST Power Fmap Matex Thermo XeMicroF XeBurn Track ; ;
MODULE SCR: NCR: MACINI: RESINI: TRIVAA: FLUD: FLPOW: THM: EVO: SIM:
       GREP: UTL: DELETE: ABORT: END: ;
*--
* Local objects and procedure
*--
LINKED_LIST Flux MacroTot MacroRefl MacroF System PowerIter OldPower ;
PROCEDURE InterpSE ComparePdist ;

*****************************************************************
* Arguments de la procedure                                     *
*****************************************************************
LOGICAL CritCB evo ;
REAL CB Prel Tinlet Ptot ;
STRING LibType ;
:: >>LibType<< >>CritCB<< >>CB<< >>Prel<< >>Tinlet<< >>Ptot<<
   >>evo<< ;

*****************************************************************
* Recuperation de biblitheques de sections efficaces           *
*****************************************************************
! Remarque : une seule bibliotheque combustible suffit, meme s'il y
!            a plusieurs combustibles (seules quelques concentrations
!            en bore seront recuperees).
XSM_FILE    SapUOX   :: FILE './Saphyb_GCMS_UOX495_0Gd.xsm' ;
XSM_FILE    ReflXS   :: FILE './Refl_xs' ;

*****************************************************************
* Variables locales                                             *
*****************************************************************
LOGICAL True False := $True_L $False_L ;
REAL ErrorRho ErrorCB ErrorTFuel ErrorDCool ErrorTCool ErrorPdis ;
REAL EpsRho EpsCB EpsTFuel EpsDCool EpsPdis :=
     0.5    0.05  0.5      5.0E-5   5.0E-4   ;
INTEGER Iter := 1 ;
REAL CBinterp CBp1 CBm1 keff DeltaRho Rho Rhom1 ;
LOGICAL CONV := $False_L ;
REAL DiffBorWorth ;
REAL InletTmodK := Tinlet 273.15 + ;

*--
* Recovery of boron boundaries from one of the Saphyb (assuming
* they are the same) and reflector
*--
REAL CBminSap CBmaxSap CBminRefl CBmaxRefl ;
STRING PARBOR ;
IF LibType 'SAPHYB' = THEN
  GREP: SapUOX :: STEP UP "paramdescrip" GETVAL "PARKEY" 1 4
                  >>PARBOR<< ;
ELSEIF LibType 'MULTICOMPO' = THEN
  GREP: SapUOX :: STEP UP 'Ass' STEP UP "GLOBAL" GETVAL "PARKEY" 1 4
                  >>PARBOR<< ;
ENDIF ;
IF PARBOR "CBOR" = NOT THEN
  UTL: SapUOX :: DUMP ;
  ECHO "It appears CBOR has changed of position inside Saphyb." ;
  ECHO "Please check and correct Steady procedure." ;
  ECHO "You should maybe loop over parkeys to find the proper one." ;
  ABORT: ;
ENDIF ;
IF LibType 'SAPHYB' = THEN
  GREP: SapUOX ::
    STEP UP "paramvaleurs" MINVAL "pval       1" 1 * >>CBminSap<< ;
  GREP: SapUOX ::
    STEP UP "paramvaleurs" MAXVAL "pval       1" 1 * >>CBmaxSap<< ;
ELSEIF LibType 'MULTICOMPO' = THEN
  GREP: SapUOX ::
    STEP UP "Ass" STEP UP "GLOBAL" MINVAL "pval00000001" 1 * >>CBminSap<< ;
  GREP: SapUOX ::
    STEP UP "Ass" STEP UP "GLOBAL" MAXVAL "pval00000001" 1 * >>CBmaxSap<< ;
ENDIF ;

GREP: ReflXS :: STEP UP "default"
  STEP UP "GLOBAL" MINVAL "pval00000001" 1 * >>CBminRefl<< ;
GREP: ReflXS :: STEP UP "default"
  STEP UP "GLOBAL" MAXVAL "pval00000001" 1 * >>CBmaxRefl<< ;
ECHO "Bornes Saphyb min et max de" PARBOR ":" CBminSap CBmaxSap ;
ECHO "Bornes reflecteur min et max en bore :" CBminRefl CBmaxRefl ;
REAL CBmin := CBminSap CBminRefl _MAX_ ;
REAL CBmax := CBmaxSap CBmaxRefl _MIN_ ;
ECHO "Min et max interpolable :" CBmin CBmax ;
*--
* Thermalhydraulics parameters
*--
*100% PN
!REAL Tinlet := 288.4 273.15 + ;
EVALUATE Ptot := Prel Ptot * ; ! 3800MW
*0% PN
!REAL Tinlet := 297.2 273.15 + ;
!REAL Ptot := 1.0E-6 ; ! 1W
*--
* Iteration loop with feedback, flux, xenon and simplified
* thermalhydraulics
*--
REPEAT
*--
* Determine CB to use for interpolation
*--
  IF CB CBmin < THEN
    EVALUATE CBinterp := CBmin ;
  ELSEIF CB CBmax > THEN
    EVALUATE CBinterp := CBmax ;
  ELSE
    EVALUATE CBinterp := CB ;
  ENDIF ;
*--
* Thermalhydraulics computation, xenon saturation
*--
  IF Iter 1 = THEN
    Fmap := SIM: Fmap :: SET-PARAM 'C-BORE' <<CBinterp>> ;
  ENDIF ;
  IF Iter 1 > THEN
    Thermo Fmap := THM: Thermo Fmap :: EDIT 0
      INLET  155.0E+05 <<InletTmodK>>
      SET-PARAM 'C-BORE' <<CBinterp>> ;
    ! Evolution jusqu'a l'equilibre seulement si demande
    ! Sinon on va rechercher la CB crit sans etre a l'equilibre Xe
    IF evo THEN
      XeBurn XeMicroF := EVO: XeBurn XeMicroF PowerIter ::
        EDIT 0 FLUX_POW DEPL 100. DAY KEEP ;
      XeBurn XeMicroF := EVO: XeBurn XeMicroF PowerIter ::
        EDIT 0 FLUX_POW SAVE 100. DAY KEEP ;
    ENDIF ;
  ENDIF ;


*--
* Saphyb Interpolation
* Historic effects are neglected for simplicity sake
*--
  XeMicroF MacroTot Matex Fmap := InterpSE
  XeMicroF Matex Fmap ::
  <<CBinterp>> <<LibType>> <<False>> ;


*--
* Flux and power computation
*--
  System := TRIVAA: MacroTot Track :: EDIT 0 ;
  MacroTot := DELETE: MacroTot ;
  IF Iter 1 = THEN
    Flux := FLUD: System Track :: EDIT 0
      ADI 4 EXTE 1.0E-5 ACCE 5 3 ;
  ELSE
    Flux := FLUD: Flux System Track :: EDIT 0
      RELAX 0.25 ;
  ENDIF ;
  System := DELETE: System ;
  GREP: Flux :: GETVAL 'K-EFFECTIVE ' 1  >>keff<<  ;
  EVALUATE Rho := 1. 1. keff / - 1.0E5 * ;
  IF Iter 1 > THEN
    PowerIter := DELETE: PowerIter ;
  ENDIF ;
  PowerIter Fmap := FLPOW: Fmap Flux Track Matex ::
    EDIT 0 PTOT <<Ptot>> PRINT DISTR POWER ;
*--
* Compute convergence errors (absolute values) on :
* - reactivity (pcm)
* - boron concentration (ppm)
* - 3D power distribution (relative discrepancy, maximum)
* - fuel temperature distribution (K, maximum)
* - moderator density distribution (g/cm3, maximum)
*--
  IF Iter 1 > THEN
    EVALUATE ErrorRho := Rho Rhom1 - ABS ;
    EVALUATE ErrorCB  := CB CBm1 - ABS ;
    Fmap OldPower PowerIter := ComparePdist :: >>ErrorPdis<< ;
    OldPower := DELETE: OldPower ;
    GREP: Thermo :: GETVAL 'ERROR-T-FUEL' 1  >>ErrorTFuel<<  ;
    GREP: Thermo :: GETVAL 'ERROR-D-COOL' 1  >>ErrorDCool<<  ;
  ENDIF ;
  OldPower := PowerIter ;
*--
* Reestimate critical CB. 3rd iteration is waited, in order to have a
* not-too-false k-effective, in particular regarding thermalhydraulics
* and neutron physics convergence. Otherwise predicted CB would be too
* far from the truth.
*--
  IF CritCB Iter 2 > * THEN
* To evaluate DiffBorWorth, we have 3 other possibilities :
* - Evaluate properly DiffBorWorth (internship ?), may be costly
* - Use the 2 previous computations to find (1 line with 2 points)
*   (may be instable during the first iterations but effective
*   near the end)
* - Use module FIND0 (may be long)
* Plot reactivity=f(CB), see which is going to be good
    EVALUATE DiffBorWorth := -7.0 ; ! pcm/ppm
    EVALUATE CBp1 := CBinterp Rho DiffBorWorth / - ;
  ENDIF ;
*--
* Prints
*--
  ECHO "#---" ;
  ECHO "Iter" Iter ;
  ECHO "keff=" keff "CB=" CB "Rho=" Rho ;
  ECHO "CBinterp=" CBinterp ;
  IF CritCB Iter 2 > * THEN
    ECHO "DiffBorWorth=" DiffBorWorth "CBp1" CBp1 ;
  ENDIF ;
  ECHO "---" ;
*--
* Check convergence
*--
  IF Iter 3 > THEN
    ECHO "Discrepancies between the previous iteration and current"
         "iteration" ;
    ECHO " Rho (pcm)     CB (ppm)      TFuel (K)     DCool (K)    "
         "Pdis (relat)" ;
    ECHO ErrorRho ErrorCB ErrorTFuel ErrorDCool ErrorPdis ;
    ECHO "" ;
    ECHO "Convergence criterion (epsilon)" ;
    ECHO " Rho (pcm)     CB (ppm)      TFuel (K)     DCool (K)    "
         "Pdis (relat)" ;
    ECHO EpsRho EpsCB EpsTFuel EpsDCool EpsPdis ;
    ECHO "" ;
    ECHO "Convergence reached ?" ;
    ECHO " Rho (pcm)     CB (ppm)      TFuel (K)     DCool (K)    "
         "Pdis (relat)" ;
    ECHO "" ErrorRho EpsRho < "      " ErrorCB EpsCB < "      "
         ErrorTFuel EpsTFuel < "       " ErrorDCool EpsDCool <
         "      " ErrorPdis  EpsPdis  < ;
    EVALUATE CONV := ErrorRho   EpsRho   <
                     ErrorCB    EpsCB    < *
                     ErrorTFuel EpsTFuel < *
                     ErrorDCool EpsDCool < *
                     ErrorPdis  EpsPdis  < * ;
  ENDIF ;
*--
* Prepare next iteration
*--
  IF CONV NOT THEN
    EVALUATE CBm1 Rhom1 := CB Rho ;
    IF CritCB Iter 2 > * THEN
      EVALUATE CB := CBp1 ;
    ENDIF ;
    EVALUATE Iter := Iter 1 + ;
  ELSE
!    EVALUATE CB := CBinterp ;
  ENDIF ;
*--
  IF Iter 500 > THEN
    ECHO "Steady.c2m: maximum iteration reached (50)." ;
    ABORT: ;
  ENDIF ;
UNTIL CONV ;

*--
* Si ça a convergé, app a THM pour affichage dans le .result
*--
Thermo Fmap := THM: Thermo Fmap :: EDIT 4
  INLET  155.0E+05 <<InletTmodK>>
  SET-PARAM 'C-BORE' <<CBinterp>> ;
*--
* Print Xe and I average fission yields. This average depends
* on burnup, thermalhydraulics and xenon conditions.
*--
!REAL YieldI YieldXe ;
!GREP: XeMicroF :: STEP UP 'DEPL-CHAIN'
!                   GETVAL 'FISSIONYIELD' 1 >>YieldI<<
!                   GETVAL 'FISSIONYIELD' 2 >>YieldXe<< ;
!ECHO "Mean fission yield for I =" YieldI  ;
!ECHO "Mean fission yield for Xe=" YieldXe ;

Power := PowerIter ;
Flux PowerIter := DELETE: Flux PowerIter ;

  :: <<CB>> ;
  :: <<keff>> ;

END: ;
